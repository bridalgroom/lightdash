import {
    Compact,
    CreateBigqueryCredentials,
    DbtCloudIDEProjectConfig,
    DbtProjectType,
    DimensionType,
    Explore,
    FieldType,
    FilterOperator,
    LightdashMode,
    MetricType,
    OrderFieldsByStrategy,
    Project,
    ProjectType,
    SupportedDbtAdapter,
    TablesConfiguration,
    TableSelectionType,
    TimeFrames,
    WarehouseTypes,
} from '@lightdash/common';
import { LightdashConfig } from '../../config/parseConfig';
import { ProjectTable } from '../../database/entities/projects';
import { EncryptionService } from '../../services/EncryptionService/EncryptionService';

export const lightdashConfigMock: LightdashConfig = {
    mode: LightdashMode.DEFAULT,
    version: '1.0',
    lightdashSecret: 'secret',
    secureCookies: true,
    cookiesMaxAgeHours: undefined,
    trustProxy: true,
    rudder: {
        writeKey: '',
        dataPlaneUrl: '',
    },
    sentry: {
        dsn: '',
        release: '',
        environment: '',
    },
    fullstory: {
        orgId: '',
        devMode: false,
    },
    auth: {
        disablePasswordAuthentication: false,
        google: {
            oauth2ClientId: undefined,
            oauth2ClientSecret: undefined,
            loginPath: '',
            callbackPath: '',
        },
        okta: {
            loginPath: '',
            callbackPath: '',
            oauth2ClientSecret: undefined,
            oauth2ClientId: undefined,
            oauth2Issuer: undefined,
            authorizationServerId: undefined,
            oktaDomain: undefined,
        },
        oneLogin: {
            loginPath: '',
            callbackPath: '',
            oauth2ClientSecret: undefined,
            oauth2ClientId: undefined,
            oauth2Issuer: undefined,
        },
    },
    intercom: {
        appId: '',
        apiBase: '',
    },
    cohere: {
        token: '',
    },
    smtp: undefined,
    siteUrl: '',
    staticIp: '',
    database: {
        connectionUri: undefined,
        maxConnections: undefined,
        minConnections: undefined,
    },
    allowMultiOrgs: false,
    maxPayloadSize: '5mb',
    query: {
        maxLimit: 5000,
        csvCellsLimit: 100000,
    },
    scheduler: {
        enabled: false,
        concurrency: 1,
        jobTimeout: 1,
    },
    logging: {
        level: 'info',
        format: 'pretty',
        outputs: ['console'],
        consoleFormat: undefined,
        consoleLevel: undefined,
        fileFormat: undefined,
        filePath: '',
        fileLevel: undefined,
    },
};

const dbtCloudIDEProjectConfigMock: DbtCloudIDEProjectConfig = {
    type: DbtProjectType.DBT_CLOUD_IDE,
    api_key: 'my api key',
    account_id: 'account_id',
    environment_id: 'environment_id',
    project_id: 'project_id',
};

const bigqueryCredentials: CreateBigqueryCredentials = {
    type: WarehouseTypes.BIGQUERY,
    project: 'name',
    dataset: 'name',
    timeoutSeconds: 1,
    priority: 'interactive',
    keyfileContents: {},
    retries: 1,
    location: 'name',
    maximumBytesBilled: 1,
};

export const encryptionServiceMock = {
    encrypt: jest.fn(() => Buffer.from('encrypted')),
    decrypt: jest.fn((encrypted: Buffer) => encrypted.toString()),
} as any as EncryptionService;

export const projectUuid = 'project uuid';

export const projectMock = {
    name: 'my project',
    project_type: ProjectType.DEFAULT,
    dbt_connection: Buffer.from(JSON.stringify(dbtCloudIDEProjectConfigMock)),
    encrypted_credentials: Buffer.from(JSON.stringify(bigqueryCredentials)),
    warehouse_type: WarehouseTypes.BIGQUERY,
    organization_uuid: 'organizationUuid',
};

export const tableSelectionMock: Pick<
    ProjectTable['base'],
    'table_selection_type' | 'table_selection_value'
> = {
    table_selection_type: TableSelectionType.ALL,
    table_selection_value: null,
};

export const updateTableSelectionMock: TablesConfiguration = {
    tableSelection: {
        type: TableSelectionType.WITH_NAMES,
        value: ['test'],
    },
};

export const expectedTablesConfiguration: TablesConfiguration = {
    tableSelection: {
        type: TableSelectionType.ALL,
        value: null,
    },
};

export const expectedProject: Project = {
    organizationUuid: 'organizationUuid',
    projectUuid,
    name: 'my project',
    type: ProjectType.DEFAULT,
    dbtConnection: {
        account_id: 'account_id',
        environment_id: 'environment_id',
        project_id: 'project_id',
        type: DbtProjectType.DBT_CLOUD_IDE,
    } as any as DbtCloudIDEProjectConfig,
    warehouseConnection: {
        dataset: 'name',
        location: 'name',
        maximumBytesBilled: 1,
        priority: 'interactive',
        project: 'name',
        retries: 1,
        timeoutSeconds: 1,
        type: WarehouseTypes.BIGQUERY,
    },
};

export const mockExploresFromCache: Explore[] = [
    {
        name: 'payments',
        tags: [],
        label: 'Payments',
        tables: {
            orders: {
                name: 'orders',
                label: 'Orders',
                schema: 'jaffle',
                metrics: {
                    fulfillment_rate: {
                        sql: 'CASE WHEN ${is_completed} THEN 1 ELSE 0 END',
                        name: 'fulfillment_rate',
                        type: MetricType.AVERAGE,
                        index: 2,
                        label: 'Fulfillment rate',
                        round: 1,
                        table: 'orders',
                        format: 'percent',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Orders',
                        compiledSql:
                            'AVG(CASE WHEN ("orders".is_completed) THEN 1 ELSE 0 END)',
                        description: 'Average of Is completed',
                        isAutoGenerated: false,
                        tablesReferences: ['orders'],
                        showUnderlyingValues: [
                            'amount',
                            'customers.first_name',
                        ],
                    },
                    average_order_size: {
                        sql: '${TABLE}.amount',
                        name: 'average_order_size',
                        type: MetricType.AVERAGE,
                        index: 5,
                        label: 'Average order size',
                        round: 2,
                        table: 'orders',
                        format: 'usd',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Orders',
                        compiledSql: 'AVG("orders".amount)',
                        description: 'Average of Amount',
                        isAutoGenerated: false,
                        tablesReferences: ['orders'],
                    },
                    total_order_amount: {
                        sql: '${TABLE}.amount',
                        name: 'total_order_amount',
                        type: MetricType.SUM,
                        index: 6,
                        label: 'Total order amount',
                        round: 2,
                        table: 'orders',
                        format: 'usd',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Orders',
                        compiledSql: 'SUM("orders".amount)',
                        description: 'Sum of Amount',
                        isAutoGenerated: false,
                        tablesReferences: ['orders'],
                    },
                    unique_order_count: {
                        sql: '${TABLE}.order_id',
                        name: 'unique_order_count',
                        type: MetricType.COUNT_DISTINCT,
                        index: 1,
                        label: 'Unique order count',
                        table: 'orders',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Orders',
                        compiledSql: 'COUNT(DISTINCT "orders".order_id)',
                        description: 'Count distinct of Order id',
                        isAutoGenerated: false,
                        tablesReferences: ['orders'],
                    },
                    date_of_first_order: {
                        sql: '${TABLE}.order_date',
                        name: 'date_of_first_order',
                        type: MetricType.MIN,
                        index: 3,
                        label: 'Date of first order',
                        table: 'orders',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Orders',
                        compiledSql: 'MIN("orders".order_date)',
                        description: 'Min of Order date',
                        isAutoGenerated: false,
                        tablesReferences: ['orders'],
                    },
                    completed_order_count: {
                        sql: 'CASE WHEN (${TABLE}.is_completed = true) THEN ${TABLE}.order_id ELSE NULL END',
                        name: 'completed_order_count',
                        type: MetricType.COUNT_DISTINCT,
                        index: 0,
                        label: 'Completed order count',
                        table: 'orders',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Orders',
                        compiledSql:
                            'COUNT(DISTINCT CASE WHEN ("orders".is_completed = true) THEN "orders".order_id ELSE NULL END)',
                        description: 'Total number of completed orders',
                        isAutoGenerated: false,
                        tablesReferences: ['orders'],
                    },
                    date_of_most_recent_order: {
                        sql: '${TABLE}.order_date',
                        name: 'date_of_most_recent_order',
                        type: MetricType.MAX,
                        index: 4,
                        label: 'Date of most recent order',
                        table: 'orders',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Orders',
                        compiledSql: 'MAX("orders".order_date)',
                        description: 'Max of Order date',
                        isAutoGenerated: false,
                        tablesReferences: ['orders'],
                    },
                    total_completed_order_amount: {
                        sql: '${TABLE}.amount',
                        name: 'total_completed_order_amount',
                        type: MetricType.SUM,
                        index: 7,
                        label: 'Total completed order amount',
                        round: 2,
                        table: 'orders',
                        format: 'usd',
                        hidden: false,
                        filters: [
                            {
                                id: 'a08e962d-862f-440f-babe-1b32dd867f56',
                                // @ts-expect-error outdated filter type - this is intended
                                target: { fieldId: 'is_completed' },
                                values: ['true'],
                                operator: FilterOperator.EQUALS,
                            },
                            {
                                id: 'a08e962d-862f-440f-babe-1b32dd867f57',
                                // @ts-expect-error outdated filter type - this is intended
                                target: { fieldId: 'customers.customer_id' },
                                operator: FilterOperator.NOT_NULL,
                            },
                        ],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Orders',
                        compiledSql:
                            'SUM(CASE WHEN (("orders".is_completed) = true) THEN ("orders".amount) ELSE NULL END)',
                        description: 'Sum of Amount',
                        isAutoGenerated: false,
                        tablesReferences: ['orders'],
                    },
                    total_non_completed_order_amount: {
                        sql: '${total_order_amount}-${total_completed_order_amount}',
                        name: 'total_non_completed_order_amount',
                        type: MetricType.NUMBER,
                        index: 8,
                        label: 'Total non completed order amount',
                        round: 2,
                        table: 'orders',
                        format: 'usd',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Orders',
                        compiledSql:
                            '(SUM("orders".amount))-(SUM(CASE WHEN (("orders".is_completed) = true) THEN ("orders".amount) ELSE NULL END))',
                        description: 'Number of Amount',
                        isAutoGenerated: false,
                        tablesReferences: ['orders'],
                    },
                },
                database: 'postgres',
                sqlTable: '"postgres"."jaffle"."orders"',
                dimensions: {
                    amount: {
                        sql: '${TABLE}.amount',
                        name: 'amount',
                        type: DimensionType.NUMBER,
                        index: 5,
                        label: 'Amount',
                        table: 'orders',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Orders',
                        compiledSql: '"orders".amount',
                        description: 'Total amount (USD) of the order',
                        tablesReferences: ['orders'],
                    },
                    status: {
                        sql: '${TABLE}.status',
                        name: 'status',
                        type: DimensionType.STRING,
                        index: 4,
                        label: 'Status',
                        table: 'orders',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Orders',
                        compiledSql: '"orders".status',
                        description:
                            'Orders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n|----------------|------------------------------------------------------------------------------------------------------------------------|\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |',
                        tablesReferences: ['orders'],
                    },
                    order_id: {
                        sql: '${TABLE}.order_id',
                        name: 'order_id',
                        type: DimensionType.NUMBER,
                        index: 0,
                        label: 'Order id',
                        table: 'orders',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Orders',
                        compiledSql: '"orders".order_id',
                        description: 'This is a unique identifier for an order',
                        tablesReferences: ['orders'],
                    },
                    order_date: {
                        sql: '${TABLE}.order_date',
                        name: 'order_date',
                        type: DimensionType.DATE,
                        index: 3,
                        label: 'Order date',
                        table: 'orders',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Orders',
                        compiledSql: '"orders".order_date',
                        description: 'Date (UTC) that the order was placed',
                        tablesReferences: ['orders'],
                    },
                    customer_id: {
                        sql: '${TABLE}.customer_id',
                        name: 'customer_id',
                        type: DimensionType.NUMBER,
                        index: 2,
                        label: 'Customer id',
                        table: 'orders',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Orders',
                        compiledSql: '"orders".customer_id',
                        description: 'Foreign key to the customers table',
                        tablesReferences: ['orders'],
                    },
                    is_completed: {
                        sql: '${TABLE}.is_completed',
                        name: 'is_completed',
                        type: DimensionType.BOOLEAN,
                        index: 1,
                        label: 'Is completed',
                        table: 'orders',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Orders',
                        compiledSql: '"orders".is_completed',
                        description:
                            'Boolean indicating if status is completed',
                        tablesReferences: ['orders'],
                    },
                    coupon_amount: {
                        sql: '${TABLE}.coupon_amount',
                        name: 'coupon_amount',
                        type: DimensionType.NUMBER,
                        index: 7,
                        label: 'Coupon amount',
                        table: 'orders',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Orders',
                        compiledSql: '"orders".coupon_amount',
                        description:
                            'Amount of the order (AUD) paid for by coupon',
                        tablesReferences: ['orders'],
                    },
                    order_date_DAY: {
                        sql: "DATE_TRUNC('DAY', ${TABLE}.order_date)",
                        name: 'order_date_day',
                        type: DimensionType.DATE,
                        group: 'order_date',
                        index: 3,
                        label: 'Order date day',
                        table: 'orders',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Orders',
                        compiledSql: 'DATE_TRUNC(\'DAY\', "orders".order_date)',
                        description: 'Date (UTC) that the order was placed',
                        timeInterval: TimeFrames.DAY,
                        tablesReferences: ['orders'],
                    },
                    order_date_WEEK: {
                        sql: "DATE_TRUNC('WEEK', ${TABLE}.order_date)",
                        name: 'order_date_week',
                        type: DimensionType.DATE,
                        group: 'order_date',
                        index: 3,
                        label: 'Order date week',
                        table: 'orders',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Orders',
                        compiledSql:
                            'DATE_TRUNC(\'WEEK\', "orders".order_date)',
                        description: 'Date (UTC) that the order was placed',
                        timeInterval: TimeFrames.WEEK,
                        tablesReferences: ['orders'],
                    },
                    order_date_YEAR: {
                        sql: "DATE_TRUNC('YEAR', ${TABLE}.order_date)",
                        name: 'order_date_year',
                        type: DimensionType.DATE,
                        group: 'order_date',
                        index: 3,
                        label: 'Order date year',
                        table: 'orders',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Orders',
                        compiledSql:
                            'DATE_TRUNC(\'YEAR\', "orders".order_date)',
                        description: 'Date (UTC) that the order was placed',
                        timeInterval: TimeFrames.YEAR,
                        tablesReferences: ['orders'],
                    },
                    gift_card_amount: {
                        sql: '${TABLE}.gift_card_amount',
                        name: 'gift_card_amount',
                        type: DimensionType.NUMBER,
                        index: 9,
                        label: 'Gift card amount',
                        table: 'orders',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Orders',
                        compiledSql: '"orders".gift_card_amount',
                        description:
                            'Amount of the order (AUD) paid for by gift card',
                        tablesReferences: ['orders'],
                    },
                    order_date_MONTH: {
                        sql: "DATE_TRUNC('MONTH', ${TABLE}.order_date)",
                        name: 'order_date_month',
                        type: DimensionType.DATE,
                        group: 'order_date',
                        index: 3,
                        label: 'Order date month',
                        table: 'orders',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Orders',
                        compiledSql:
                            'DATE_TRUNC(\'MONTH\', "orders".order_date)',
                        description: 'Date (UTC) that the order was placed',
                        timeInterval: TimeFrames.MONTH,
                        tablesReferences: ['orders'],
                    },
                    credit_card_amount: {
                        sql: '${TABLE}.credit_card_amount',
                        name: 'credit_card_amount',
                        type: DimensionType.NUMBER,
                        index: 6,
                        label: 'Credit card amount',
                        table: 'orders',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Orders',
                        compiledSql: '"orders".credit_card_amount',
                        description:
                            'Amount of the order (AUD) paid for by credit card',
                        tablesReferences: ['orders'],
                    },
                    bank_transfer_amount: {
                        sql: '${TABLE}.bank_transfer_amount',
                        name: 'bank_transfer_amount',
                        type: DimensionType.NUMBER,
                        index: 8,
                        label: 'Bank transfer amount',
                        table: 'orders',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Orders',
                        compiledSql: '"orders".bank_transfer_amount',
                        description:
                            'Amount of the order (AUD) paid for by bank transfer',
                        tablesReferences: ['orders'],
                    },
                },
                description:
                    'This table has basic information about orders, as well as some derived facts based on payments',
                lineageGraph: {
                    orders: [
                        { name: 'stg_orders', type: 'model' },
                        { name: 'stg_payments', type: 'model' },
                    ],
                    stg_orders: [],
                    stg_payments: [],
                },
                orderFieldsBy: OrderFieldsByStrategy.LABEL,
            },
            payments: {
                name: 'payments',
                label: 'Payments',
                schema: 'jaffle',
                metrics: {
                    total_revenue: {
                        sql: '${TABLE}.amount',
                        name: 'total_revenue',
                        type: MetricType.SUM,
                        index: 1,
                        label: 'Total revenue',
                        table: 'payments',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Payments',
                        compiledSql: 'SUM("payments".amount)',
                        description: 'Sum of all payments',
                        isAutoGenerated: false,
                        tablesReferences: ['payments'],
                    },
                    unique_payment_count: {
                        sql: '${TABLE}.payment_id',
                        name: 'unique_payment_count',
                        type: MetricType.COUNT_DISTINCT,
                        index: 0,
                        label: 'Unique payment count',
                        table: 'payments',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Payments',
                        compiledSql: 'COUNT(DISTINCT "payments".payment_id)',
                        description: 'count of all payments',
                        isAutoGenerated: false,
                        tablesReferences: ['payments'],
                    },
                },
                database: 'postgres',
                sqlTable: '"postgres"."jaffle"."payments"',
                dimensions: {
                    amount: {
                        sql: '${TABLE}.amount',
                        name: 'amount',
                        type: DimensionType.NUMBER,
                        index: 3,
                        label: 'Amount',
                        table: 'payments',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Payments',
                        compiledSql: '"payments".amount',
                        description:
                            'Total amount (AUD) of the individual payment',
                        tablesReferences: ['payments'],
                    },
                    order_id: {
                        sql: '${TABLE}.order_id',
                        name: 'order_id',
                        type: DimensionType.NUMBER,
                        index: 1,
                        label: 'Order id',
                        table: 'payments',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Payments',
                        compiledSql: '"payments".order_id',
                        description: 'Foreign key to the orders table',
                        tablesReferences: ['payments'],
                    },
                    payment_id: {
                        sql: '${TABLE}.payment_id',
                        name: 'payment_id',
                        type: DimensionType.NUMBER,
                        index: 0,
                        label: 'Payment id',
                        table: 'payments',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Payments',
                        compiledSql: '"payments".payment_id',
                        description:
                            'This is a unique identifier for a payment',
                        tablesReferences: ['payments'],
                    },
                    payment_method: {
                        sql: '${TABLE}.payment_method',
                        name: 'payment_method',
                        type: DimensionType.STRING,
                        index: 2,
                        label: 'Payment method',
                        table: 'payments',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Payments',
                        compiledSql: '"payments".payment_method',
                        description:
                            'Method of payment used, for example credit card',
                        tablesReferences: ['payments'],
                    },
                },
                description:
                    'This table has information about individual payments',
                lineageGraph: {
                    payments: [{ name: 'stg_payments', type: 'model' }],
                    stg_payments: [],
                },
                orderFieldsBy: OrderFieldsByStrategy.LABEL,
            },
            customers: {
                name: 'customers',
                label: 'Customers',
                schema: 'jaffle',
                metrics: {
                    dbt_derived: {
                        sql: '${unique_customer_count} / ${unique_customer_count}',
                        name: 'dbt_derived',
                        type: MetricType.NUMBER,
                        index: 2,
                        label: 'dbt_derived',
                        table: 'customers',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Customers',
                        compiledSql:
                            '(COUNT(DISTINCT "customers".customer_id)) / (COUNT(DISTINCT "customers".customer_id))',
                        description: '',
                        isAutoGenerated: false,
                        tablesReferences: ['customers'],
                    },
                    dbt_expression: {
                        sql: '${unique_customer_count} / ${unique_customer_count}',
                        name: 'dbt_expression',
                        type: MetricType.NUMBER,
                        index: 1,
                        label: 'dbt_expression',
                        table: 'customers',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Customers',
                        compiledSql:
                            '(COUNT(DISTINCT "customers".customer_id)) / (COUNT(DISTINCT "customers".customer_id))',
                        description: 'derived metric in v1.2 ( deprecated )',
                        isAutoGenerated: false,
                        tablesReferences: ['customers'],
                    },
                    unique_customer_count: {
                        sql: '${TABLE}.customer_id',
                        name: 'unique_customer_count',
                        type: MetricType.COUNT_DISTINCT,
                        index: 0,
                        label: 'Unique customer count',
                        table: 'customers',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Customers',
                        compiledSql: 'COUNT(DISTINCT "customers".customer_id)',
                        description: 'Total number of customers',
                        isAutoGenerated: false,
                        tablesReferences: ['customers'],
                    },
                    date_of_first_created_customer: {
                        sql: '${TABLE}.created',
                        name: 'date_of_first_created_customer',
                        type: MetricType.MIN,
                        index: 3,
                        label: 'Date of first created customer',
                        table: 'customers',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Customers',
                        compiledSql: 'MIN("customers".created)',
                        description: 'Min of Created',
                        isAutoGenerated: false,
                        tablesReferences: ['customers'],
                    },
                    date_of_most_recent_created_customer: {
                        sql: '${TABLE}.created',
                        name: 'date_of_most_recent_created_customer',
                        type: MetricType.MAX,
                        index: 4,
                        label: 'Date of most recent created customer',
                        table: 'customers',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Customers',
                        compiledSql: 'MAX("customers".created)',
                        description: 'Max of Created',
                        isAutoGenerated: false,
                        tablesReferences: ['customers'],
                    },
                },
                database: 'postgres',
                sqlTable: '"postgres"."jaffle"."customers"',
                dimensions: {
                    created: {
                        sql: '${TABLE}.created',
                        name: 'created',
                        type: DimensionType.TIMESTAMP,
                        index: 3,
                        label: 'Created',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".created',
                        description:
                            'Timestamp (UTC) when customer was created',
                        tablesReferences: ['customers'],
                    },
                    last_name: {
                        sql: '${TABLE}.last_name',
                        name: 'last_name',
                        type: DimensionType.STRING,
                        index: 2,
                        label: 'Last name',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".last_name',
                        description: "Customer's last name. PII.",
                        tablesReferences: ['customers'],
                    },
                    first_name: {
                        sql: '${TABLE}.first_name',
                        name: 'first_name',
                        type: DimensionType.STRING,
                        urls: [
                            {
                                url: 'https://example.com/company/${value.formatted | url_encode }',
                                label: 'URL from value',
                            },
                            {
                                url: 'https://example.com/company/${row.customers.customer_id.raw | url_encode }',
                                label: 'URL from row value',
                            },
                            {
                                url: 'https://example.com/company/${row.customer_id.raw | url_encode }',
                                label: 'Invalid URL with bad reference',
                            },
                        ],
                        index: 1,
                        label: 'First name',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".first_name',
                        description: "Customer's first name. PII.",
                        tablesReferences: ['customers'],
                    },
                    created_DAY: {
                        sql: "DATE_TRUNC('DAY', ${TABLE}.created)",
                        name: 'created_day',
                        type: DimensionType.DATE,
                        group: 'created',
                        index: 3,
                        label: 'Created day',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: 'DATE_TRUNC(\'DAY\', "customers".created)',
                        description:
                            'Timestamp (UTC) when customer was created',
                        timeInterval: TimeFrames.DAY,
                        tablesReferences: ['customers'],
                    },
                    created_RAW: {
                        sql: '${TABLE}.created',
                        name: 'created_raw',
                        type: DimensionType.TIMESTAMP,
                        group: 'created',
                        index: 3,
                        label: 'Created raw',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".created',
                        description:
                            'Timestamp (UTC) when customer was created',
                        timeInterval: TimeFrames.RAW,
                        tablesReferences: ['customers'],
                    },
                    customer_id: {
                        sql: '${TABLE}.customer_id',
                        name: 'customer_id',
                        type: DimensionType.NUMBER,
                        index: 0,
                        label: 'Customer id',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".customer_id',
                        description:
                            'This is a unique identifier for a customer',
                        tablesReferences: ['customers'],
                    },
                    first_order: {
                        sql: '${TABLE}.first_order',
                        name: 'first_order',
                        type: DimensionType.DATE,
                        index: 4,
                        label: 'First order',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".first_order',
                        description: 'Date of the customers first order',
                        tablesReferences: ['customers'],
                    },
                    created_WEEK: {
                        sql: "DATE_TRUNC('WEEK', ${TABLE}.created)",
                        name: 'created_week',
                        type: DimensionType.DATE,
                        group: 'created',
                        index: 3,
                        label: 'Created week',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'WEEK\', "customers".created)',
                        description:
                            'Timestamp (UTC) when customer was created',
                        timeInterval: TimeFrames.WEEK,
                        tablesReferences: ['customers'],
                    },
                    created_YEAR: {
                        sql: "DATE_TRUNC('YEAR', ${TABLE}.created)",
                        name: 'created_year',
                        type: DimensionType.DATE,
                        group: 'created',
                        index: 3,
                        label: 'Created year',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'YEAR\', "customers".created)',
                        description:
                            'Timestamp (UTC) when customer was created',
                        timeInterval: TimeFrames.YEAR,
                        tablesReferences: ['customers'],
                    },
                    created_MONTH: {
                        sql: "DATE_TRUNC('MONTH', ${TABLE}.created)",
                        name: 'created_month',
                        type: DimensionType.DATE,
                        group: 'created',
                        index: 3,
                        label: 'Created month',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'MONTH\', "customers".created)',
                        description:
                            'Timestamp (UTC) when customer was created',
                        timeInterval: TimeFrames.MONTH,
                        tablesReferences: ['customers'],
                    },
                    created_QUARTER: {
                        sql: "DATE_TRUNC('QUARTER', ${TABLE}.created)",
                        name: 'created_quarter',
                        type: DimensionType.DATE,
                        group: 'created',
                        index: 3,
                        label: 'Created quarter',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'QUARTER\', "customers".created)',
                        description:
                            'Timestamp (UTC) when customer was created',
                        timeInterval: TimeFrames.QUARTER,
                        tablesReferences: ['customers'],
                    },
                    first_order_DAY: {
                        sql: "DATE_TRUNC('DAY', ${TABLE}.first_order)",
                        name: 'first_order_day',
                        type: DimensionType.DATE,
                        group: 'first_order',
                        index: 4,
                        label: 'First order day',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'DAY\', "customers".first_order)',
                        description: 'Date of the customers first order',
                        timeInterval: TimeFrames.DAY,
                        tablesReferences: ['customers'],
                    },
                    first_order_WEEK: {
                        sql: "DATE_TRUNC('WEEK', ${TABLE}.first_order)",
                        name: 'first_order_week',
                        type: DimensionType.DATE,
                        group: 'first_order',
                        index: 4,
                        label: 'First order week',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'WEEK\', "customers".first_order)',
                        description: 'Date of the customers first order',
                        timeInterval: TimeFrames.WEEK,
                        tablesReferences: ['customers'],
                    },
                    first_order_YEAR: {
                        sql: "DATE_TRUNC('YEAR', ${TABLE}.first_order)",
                        name: 'first_order_year',
                        type: DimensionType.DATE,
                        group: 'first_order',
                        index: 4,
                        label: 'First order year',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'YEAR\', "customers".first_order)',
                        description: 'Date of the customers first order',
                        timeInterval: TimeFrames.YEAR,
                        tablesReferences: ['customers'],
                    },
                    number_of_orders: {
                        sql: '${TABLE}.number_of_orders',
                        name: 'number_of_orders',
                        type: DimensionType.NUMBER,
                        index: 8,
                        label: 'Number of orders',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".number_of_orders',
                        description: '',
                        tablesReferences: ['customers'],
                    },
                    first_order_MONTH: {
                        sql: "DATE_TRUNC('MONTH', ${TABLE}.first_order)",
                        name: 'first_order_month',
                        type: DimensionType.DATE,
                        group: 'first_order',
                        index: 4,
                        label: 'First order month',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'MONTH\', "customers".first_order)',
                        description: 'Date of the customers first order',
                        timeInterval: TimeFrames.MONTH,
                        tablesReferences: ['customers'],
                    },
                    most_recent_order: {
                        sql: '${TABLE}.most_recent_order',
                        name: 'most_recent_order',
                        type: DimensionType.DATE,
                        index: 5,
                        label: 'Most recent order',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".most_recent_order',
                        description: 'Date of the customers most recent order',
                        tablesReferences: ['customers'],
                    },
                    days_since_last_order: {
                        sql: '${TABLE}.days_since_last_order',
                        name: 'days_since_last_order',
                        type: DimensionType.NUMBER,
                        index: 6,
                        label: 'Days since last order',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".days_since_last_order',
                        description:
                            'Number of days since the customers last order',
                        tablesReferences: ['customers'],
                    },
                    most_recent_order_DAY: {
                        sql: "DATE_TRUNC('DAY', ${TABLE}.most_recent_order)",
                        name: 'most_recent_order_day',
                        type: DimensionType.DATE,
                        group: 'most_recent_order',
                        index: 5,
                        label: 'Most recent order day',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'DAY\', "customers".most_recent_order)',
                        description: 'Date of the customers most recent order',
                        timeInterval: TimeFrames.DAY,
                        tablesReferences: ['customers'],
                    },
                    most_recent_order_WEEK: {
                        sql: "DATE_TRUNC('WEEK', ${TABLE}.most_recent_order)",
                        name: 'most_recent_order_week',
                        type: DimensionType.DATE,
                        group: 'most_recent_order',
                        index: 5,
                        label: 'Most recent order week',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'WEEK\', "customers".most_recent_order)',
                        description: 'Date of the customers most recent order',
                        timeInterval: TimeFrames.WEEK,
                        tablesReferences: ['customers'],
                    },
                    most_recent_order_YEAR: {
                        sql: "DATE_TRUNC('YEAR', ${TABLE}.most_recent_order)",
                        name: 'most_recent_order_year',
                        type: DimensionType.DATE,
                        group: 'most_recent_order',
                        index: 5,
                        label: 'Most recent order year',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'YEAR\', "customers".most_recent_order)',
                        description: 'Date of the customers most recent order',
                        timeInterval: TimeFrames.YEAR,
                        tablesReferences: ['customers'],
                    },
                    customer_lifetime_value: {
                        sql: '${TABLE}.customer_lifetime_value',
                        name: 'customer_lifetime_value',
                        type: DimensionType.NUMBER,
                        index: 9,
                        label: 'Customer lifetime value',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".customer_lifetime_value',
                        description: '',
                        tablesReferences: ['customers'],
                    },
                    most_recent_order_MONTH: {
                        sql: "DATE_TRUNC('MONTH', ${TABLE}.most_recent_order)",
                        name: 'most_recent_order_month',
                        type: DimensionType.DATE,
                        group: 'most_recent_order',
                        index: 5,
                        label: 'Most recent order month',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'MONTH\', "customers".most_recent_order)',
                        description: 'Date of the customers most recent order',
                        timeInterval: TimeFrames.MONTH,
                        tablesReferences: ['customers'],
                    },
                    days_between_created_and_first_order: {
                        sql: '${TABLE}.days_between_created_and_first_order',
                        name: 'days_between_created_and_first_order',
                        type: DimensionType.NUMBER,
                        index: 7,
                        label: 'Days between created and first order',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            '"customers".days_between_created_and_first_order',
                        description:
                            'Number of days between the customer being created and making their first order',
                        tablesReferences: ['customers'],
                    },
                },
                description:
                    "This table has basic information about a customer, as well as some derived facts based on a customer's orders",
                lineageGraph: {
                    customers: [
                        { name: 'stg_customers', type: 'model' },
                        { name: 'stg_orders', type: 'model' },
                        { name: 'stg_payments', type: 'model' },
                    ],
                    stg_orders: [],
                    stg_payments: [],
                    stg_customers: [],
                },
                orderFieldsBy: OrderFieldsByStrategy.LABEL,
            },
        },
        baseTable: 'payments',
        joinedTables: [
            {
                sqlOn: '${orders.order_id} = ${payments.order_id}',
                table: 'orders',
                compiledSqlOn: '("orders".order_id) = ("payments".order_id)',
            },
            {
                sqlOn: '${customers.customer_id} = ${orders.customer_id}',
                table: 'customers',
                compiledSqlOn:
                    '("customers".customer_id) = ("orders".customer_id)',
            },
        ],
        targetDatabase: SupportedDbtAdapter.POSTGRES,
    },
    {
        name: 'customers',
        tags: [],
        label: 'Customers',
        tables: {
            customers: {
                name: 'customers',
                label: 'Customers',
                schema: 'jaffle',
                metrics: {
                    dbt_derived: {
                        sql: '${unique_customer_count} / ${unique_customer_count}',
                        name: 'dbt_derived',
                        type: MetricType.NUMBER,
                        index: 2,
                        label: 'dbt_derived',
                        table: 'customers',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Customers',
                        compiledSql:
                            '(COUNT(DISTINCT "customers".customer_id)) / (COUNT(DISTINCT "customers".customer_id))',
                        description: '',
                        isAutoGenerated: false,
                        tablesReferences: ['customers'],
                    },
                    dbt_expression: {
                        sql: '${unique_customer_count} / ${unique_customer_count}',
                        name: 'dbt_expression',
                        type: MetricType.NUMBER,
                        index: 1,
                        label: 'dbt_expression',
                        table: 'customers',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Customers',
                        compiledSql:
                            '(COUNT(DISTINCT "customers".customer_id)) / (COUNT(DISTINCT "customers".customer_id))',
                        description: 'derived metric in v1.2 ( deprecated )',
                        isAutoGenerated: false,
                        tablesReferences: ['customers'],
                    },
                    unique_customer_count: {
                        sql: '${TABLE}.customer_id',
                        name: 'unique_customer_count',
                        type: MetricType.COUNT_DISTINCT,
                        index: 0,
                        label: 'Unique customer count',
                        table: 'customers',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Customers',
                        compiledSql: 'COUNT(DISTINCT "customers".customer_id)',
                        description: 'Total number of customers',
                        isAutoGenerated: false,
                        tablesReferences: ['customers'],
                    },
                    date_of_first_created_customer: {
                        sql: '${TABLE}.created',
                        name: 'date_of_first_created_customer',
                        type: MetricType.MIN,
                        index: 3,
                        label: 'Date of first created customer',
                        table: 'customers',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Customers',
                        compiledSql: 'MIN("customers".created)',
                        description: 'Min of Created',
                        isAutoGenerated: false,
                        tablesReferences: ['customers'],
                    },
                    date_of_most_recent_created_customer: {
                        sql: '${TABLE}.created',
                        name: 'date_of_most_recent_created_customer',
                        type: MetricType.MAX,
                        index: 4,
                        label: 'Date of most recent created customer',
                        table: 'customers',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Customers',
                        compiledSql: 'MAX("customers".created)',
                        description: 'Max of Created',
                        isAutoGenerated: false,
                        tablesReferences: ['customers'],
                    },
                },
                database: 'postgres',
                sqlTable: '"postgres"."jaffle"."customers"',
                dimensions: {
                    created: {
                        sql: '${TABLE}.created',
                        name: 'created',
                        type: DimensionType.TIMESTAMP,
                        index: 3,
                        label: 'Created',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".created',
                        description:
                            'Timestamp (UTC) when customer was created',
                        tablesReferences: ['customers'],
                    },
                    last_name: {
                        sql: '${TABLE}.last_name',
                        name: 'last_name',
                        type: DimensionType.STRING,
                        index: 2,
                        label: 'Last name',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".last_name',
                        description: "Customer's last name. PII.",
                        tablesReferences: ['customers'],
                    },
                    first_name: {
                        sql: '${TABLE}.first_name',
                        name: 'first_name',
                        type: DimensionType.STRING,
                        urls: [
                            {
                                url: 'https://example.com/company/${value.formatted | url_encode }',
                                label: 'URL from value',
                            },
                            {
                                url: 'https://example.com/company/${row.customers.customer_id.raw | url_encode }',
                                label: 'URL from row value',
                            },
                            {
                                url: 'https://example.com/company/${row.customer_id.raw | url_encode }',
                                label: 'Invalid URL with bad reference',
                            },
                        ],
                        index: 1,
                        label: 'First name',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".first_name',
                        description: "Customer's first name. PII.",
                        tablesReferences: ['customers'],
                    },
                    created_DAY: {
                        sql: "DATE_TRUNC('DAY', ${TABLE}.created)",
                        name: 'created_day',
                        type: DimensionType.DATE,
                        group: 'created',
                        index: 3,
                        label: 'Created day',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: 'DATE_TRUNC(\'DAY\', "customers".created)',
                        description:
                            'Timestamp (UTC) when customer was created',
                        timeInterval: TimeFrames.DAY,
                        tablesReferences: ['customers'],
                    },
                    created_RAW: {
                        sql: '${TABLE}.created',
                        name: 'created_raw',
                        type: DimensionType.TIMESTAMP,
                        group: 'created',
                        index: 3,
                        label: 'Created raw',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".created',
                        description:
                            'Timestamp (UTC) when customer was created',
                        timeInterval: TimeFrames.RAW,
                        tablesReferences: ['customers'],
                    },
                    customer_id: {
                        sql: '${TABLE}.customer_id',
                        name: 'customer_id',
                        type: DimensionType.NUMBER,
                        index: 0,
                        label: 'Customer id',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".customer_id',
                        description:
                            'This is a unique identifier for a customer',
                        tablesReferences: ['customers'],
                    },
                    first_order: {
                        sql: '${TABLE}.first_order',
                        name: 'first_order',
                        type: DimensionType.DATE,
                        index: 4,
                        label: 'First order',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".first_order',
                        description: 'Date of the customers first order',
                        tablesReferences: ['customers'],
                    },
                    created_WEEK: {
                        sql: "DATE_TRUNC('WEEK', ${TABLE}.created)",
                        name: 'created_week',
                        type: DimensionType.DATE,
                        group: 'created',
                        index: 3,
                        label: 'Created week',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'WEEK\', "customers".created)',
                        description:
                            'Timestamp (UTC) when customer was created',
                        timeInterval: TimeFrames.WEEK,
                        tablesReferences: ['customers'],
                    },
                    created_YEAR: {
                        sql: "DATE_TRUNC('YEAR', ${TABLE}.created)",
                        name: 'created_year',
                        type: DimensionType.DATE,
                        group: 'created',
                        index: 3,
                        label: 'Created year',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'YEAR\', "customers".created)',
                        description:
                            'Timestamp (UTC) when customer was created',
                        timeInterval: TimeFrames.YEAR,
                        tablesReferences: ['customers'],
                    },
                    created_MONTH: {
                        sql: "DATE_TRUNC('MONTH', ${TABLE}.created)",
                        name: 'created_month',
                        type: DimensionType.DATE,
                        group: 'created',
                        index: 3,
                        label: 'Created month',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'MONTH\', "customers".created)',
                        description:
                            'Timestamp (UTC) when customer was created',
                        timeInterval: TimeFrames.MONTH,
                        tablesReferences: ['customers'],
                    },
                    created_QUARTER: {
                        sql: "DATE_TRUNC('QUARTER', ${TABLE}.created)",
                        name: 'created_quarter',
                        type: DimensionType.DATE,
                        group: 'created',
                        index: 3,
                        label: 'Created quarter',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'QUARTER\', "customers".created)',
                        description:
                            'Timestamp (UTC) when customer was created',
                        timeInterval: TimeFrames.QUARTER,
                        tablesReferences: ['customers'],
                    },
                    first_order_DAY: {
                        sql: "DATE_TRUNC('DAY', ${TABLE}.first_order)",
                        name: 'first_order_day',
                        type: DimensionType.DATE,
                        group: 'first_order',
                        index: 4,
                        label: 'First order day',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'DAY\', "customers".first_order)',
                        description: 'Date of the customers first order',
                        timeInterval: TimeFrames.DAY,
                        tablesReferences: ['customers'],
                    },
                    first_order_WEEK: {
                        sql: "DATE_TRUNC('WEEK', ${TABLE}.first_order)",
                        name: 'first_order_week',
                        type: DimensionType.DATE,
                        group: 'first_order',
                        index: 4,
                        label: 'First order week',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'WEEK\', "customers".first_order)',
                        description: 'Date of the customers first order',
                        timeInterval: TimeFrames.WEEK,
                        tablesReferences: ['customers'],
                    },
                    first_order_YEAR: {
                        sql: "DATE_TRUNC('YEAR', ${TABLE}.first_order)",
                        name: 'first_order_year',
                        type: DimensionType.DATE,
                        group: 'first_order',
                        index: 4,
                        label: 'First order year',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'YEAR\', "customers".first_order)',
                        description: 'Date of the customers first order',
                        timeInterval: TimeFrames.YEAR,
                        tablesReferences: ['customers'],
                    },
                    number_of_orders: {
                        sql: '${TABLE}.number_of_orders',
                        name: 'number_of_orders',
                        type: DimensionType.NUMBER,
                        index: 8,
                        label: 'Number of orders',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".number_of_orders',
                        description: '',
                        tablesReferences: ['customers'],
                    },
                    first_order_MONTH: {
                        sql: "DATE_TRUNC('MONTH', ${TABLE}.first_order)",
                        name: 'first_order_month',
                        type: DimensionType.DATE,
                        group: 'first_order',
                        index: 4,
                        label: 'First order month',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'MONTH\', "customers".first_order)',
                        description: 'Date of the customers first order',
                        timeInterval: TimeFrames.MONTH,
                        tablesReferences: ['customers'],
                    },
                    most_recent_order: {
                        sql: '${TABLE}.most_recent_order',
                        name: 'most_recent_order',
                        type: DimensionType.DATE,
                        index: 5,
                        label: 'Most recent order',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".most_recent_order',
                        description: 'Date of the customers most recent order',
                        tablesReferences: ['customers'],
                    },
                    days_since_last_order: {
                        sql: '${TABLE}.days_since_last_order',
                        name: 'days_since_last_order',
                        type: DimensionType.NUMBER,
                        index: 6,
                        label: 'Days since last order',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".days_since_last_order',
                        description:
                            'Number of days since the customers last order',
                        tablesReferences: ['customers'],
                    },
                    most_recent_order_DAY: {
                        sql: "DATE_TRUNC('DAY', ${TABLE}.most_recent_order)",
                        name: 'most_recent_order_day',
                        type: DimensionType.DATE,
                        group: 'most_recent_order',
                        index: 5,
                        label: 'Most recent order day',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'DAY\', "customers".most_recent_order)',
                        description: 'Date of the customers most recent order',
                        timeInterval: TimeFrames.DAY,
                        tablesReferences: ['customers'],
                    },
                    most_recent_order_WEEK: {
                        sql: "DATE_TRUNC('WEEK', ${TABLE}.most_recent_order)",
                        name: 'most_recent_order_week',
                        type: DimensionType.DATE,
                        group: 'most_recent_order',
                        index: 5,
                        label: 'Most recent order week',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'WEEK\', "customers".most_recent_order)',
                        description: 'Date of the customers most recent order',
                        timeInterval: TimeFrames.WEEK,
                        tablesReferences: ['customers'],
                    },
                    most_recent_order_YEAR: {
                        sql: "DATE_TRUNC('YEAR', ${TABLE}.most_recent_order)",
                        name: 'most_recent_order_year',
                        type: DimensionType.DATE,
                        group: 'most_recent_order',
                        index: 5,
                        label: 'Most recent order year',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'YEAR\', "customers".most_recent_order)',
                        description: 'Date of the customers most recent order',
                        timeInterval: TimeFrames.YEAR,
                        tablesReferences: ['customers'],
                    },
                    customer_lifetime_value: {
                        sql: '${TABLE}.customer_lifetime_value',
                        name: 'customer_lifetime_value',
                        type: DimensionType.NUMBER,
                        index: 9,
                        label: 'Customer lifetime value',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".customer_lifetime_value',
                        description: '',
                        tablesReferences: ['customers'],
                    },
                    most_recent_order_MONTH: {
                        sql: "DATE_TRUNC('MONTH', ${TABLE}.most_recent_order)",
                        name: 'most_recent_order_month',
                        type: DimensionType.DATE,
                        group: 'most_recent_order',
                        index: 5,
                        label: 'Most recent order month',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'MONTH\', "customers".most_recent_order)',
                        description: 'Date of the customers most recent order',
                        timeInterval: TimeFrames.MONTH,
                        tablesReferences: ['customers'],
                    },
                    days_between_created_and_first_order: {
                        sql: '${TABLE}.days_between_created_and_first_order',
                        name: 'days_between_created_and_first_order',
                        type: DimensionType.NUMBER,
                        index: 7,
                        label: 'Days between created and first order',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            '"customers".days_between_created_and_first_order',
                        description:
                            'Number of days between the customer being created and making their first order',
                        tablesReferences: ['customers'],
                    },
                },
                description:
                    "This table has basic information about a customer, as well as some derived facts based on a customer's orders",
                lineageGraph: {
                    customers: [
                        { name: 'stg_customers', type: 'model' },
                        { name: 'stg_orders', type: 'model' },
                        { name: 'stg_payments', type: 'model' },
                    ],
                    stg_orders: [],
                    stg_payments: [],
                    stg_customers: [],
                },
                orderFieldsBy: OrderFieldsByStrategy.LABEL,
            },
        },
        baseTable: 'customers',
        joinedTables: [],
        targetDatabase: SupportedDbtAdapter.POSTGRES,
    },
    {
        name: 'orders',
        tags: [],
        label: 'Orders',
        tables: {
            orders: {
                name: 'orders',
                label: 'Orders',
                schema: 'jaffle',
                metrics: {
                    fulfillment_rate: {
                        sql: 'CASE WHEN ${is_completed} THEN 1 ELSE 0 END',
                        name: 'fulfillment_rate',
                        type: MetricType.AVERAGE,
                        index: 2,
                        label: 'Fulfillment rate',
                        round: 1,
                        table: 'orders',
                        format: 'percent',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Orders',
                        compiledSql:
                            'AVG(CASE WHEN ("orders".is_completed) THEN 1 ELSE 0 END)',
                        description: 'Average of Is completed',
                        isAutoGenerated: false,
                        tablesReferences: ['orders'],
                        showUnderlyingValues: [
                            'amount',
                            'customers.first_name',
                        ],
                    },
                    average_order_size: {
                        sql: '${TABLE}.amount',
                        name: 'average_order_size',
                        type: MetricType.AVERAGE,
                        index: 5,
                        label: 'Average order size',
                        round: 2,
                        table: 'orders',
                        format: 'usd',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Orders',
                        compiledSql: 'AVG("orders".amount)',
                        description: 'Average of Amount',
                        isAutoGenerated: false,
                        tablesReferences: ['orders'],
                    },
                    total_order_amount: {
                        sql: '${TABLE}.amount',
                        name: 'total_order_amount',
                        type: MetricType.SUM,
                        index: 6,
                        label: 'Total order amount',
                        round: 2,
                        table: 'orders',
                        format: 'usd',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Orders',
                        compiledSql: 'SUM("orders".amount)',
                        description: 'Sum of Amount',
                        isAutoGenerated: false,
                        tablesReferences: ['orders'],
                    },
                    unique_order_count: {
                        sql: '${TABLE}.order_id',
                        name: 'unique_order_count',
                        type: MetricType.COUNT_DISTINCT,
                        index: 1,
                        label: 'Unique order count',
                        table: 'orders',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Orders',
                        compiledSql: 'COUNT(DISTINCT "orders".order_id)',
                        description: 'Count distinct of Order id',
                        isAutoGenerated: false,
                        tablesReferences: ['orders'],
                    },
                    date_of_first_order: {
                        sql: '${TABLE}.order_date',
                        name: 'date_of_first_order',
                        type: MetricType.MIN,
                        index: 3,
                        label: 'Date of first order',
                        table: 'orders',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Orders',
                        compiledSql: 'MIN("orders".order_date)',
                        description: 'Min of Order date',
                        isAutoGenerated: false,
                        tablesReferences: ['orders'],
                    },
                    completed_order_count: {
                        sql: 'CASE WHEN (${TABLE}.is_completed = true) THEN ${TABLE}.order_id ELSE NULL END',
                        name: 'completed_order_count',
                        type: MetricType.COUNT_DISTINCT,
                        index: 0,
                        label: 'Completed order count',
                        table: 'orders',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Orders',
                        compiledSql:
                            'COUNT(DISTINCT CASE WHEN ("orders".is_completed = true) THEN "orders".order_id ELSE NULL END)',
                        description: 'Total number of completed orders',
                        isAutoGenerated: false,
                        tablesReferences: ['orders'],
                    },
                    date_of_most_recent_order: {
                        sql: '${TABLE}.order_date',
                        name: 'date_of_most_recent_order',
                        type: MetricType.MAX,
                        index: 4,
                        label: 'Date of most recent order',
                        table: 'orders',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Orders',
                        compiledSql: 'MAX("orders".order_date)',
                        description: 'Max of Order date',
                        isAutoGenerated: false,
                        tablesReferences: ['orders'],
                    },
                    total_completed_order_amount: {
                        sql: '${TABLE}.amount',
                        name: 'total_completed_order_amount',
                        type: MetricType.SUM,
                        index: 7,
                        label: 'Total completed order amount',
                        round: 2,
                        table: 'orders',
                        format: 'usd',
                        hidden: false,
                        filters: [
                            {
                                id: 'a08e962d-862f-440f-babe-1b32dd867f56',
                                target: { fieldRef: 'is_completed' },
                                values: ['true'],
                                operator: FilterOperator.EQUALS,
                            },
                        ],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Orders',
                        compiledSql:
                            'SUM(CASE WHEN (("orders".is_completed) = true) THEN ("orders".amount) ELSE NULL END)',
                        description: 'Sum of Amount',
                        isAutoGenerated: false,
                        tablesReferences: ['orders'],
                    },
                    total_non_completed_order_amount: {
                        sql: '${total_order_amount}-${total_completed_order_amount}',
                        name: 'total_non_completed_order_amount',
                        type: MetricType.NUMBER,
                        index: 8,
                        label: 'Total non completed order amount',
                        round: 2,
                        table: 'orders',
                        format: 'usd',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Orders',
                        compiledSql:
                            '(SUM("orders".amount))-(SUM(CASE WHEN (("orders".is_completed) = true) THEN ("orders".amount) ELSE NULL END))',
                        description: 'Number of Amount',
                        isAutoGenerated: false,
                        tablesReferences: ['orders'],
                    },
                },
                database: 'postgres',
                sqlTable: '"postgres"."jaffle"."orders"',
                dimensions: {
                    amount: {
                        sql: '${TABLE}.amount',
                        name: 'amount',
                        type: DimensionType.NUMBER,
                        index: 5,
                        label: 'Amount',
                        table: 'orders',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Orders',
                        compiledSql: '"orders".amount',
                        description: 'Total amount (USD) of the order',
                        tablesReferences: ['orders'],
                    },
                    status: {
                        sql: '${TABLE}.status',
                        name: 'status',
                        type: DimensionType.STRING,
                        index: 4,
                        label: 'Status',
                        table: 'orders',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Orders',
                        compiledSql: '"orders".status',
                        description:
                            'Orders can be one of the following statuses:\n\n| status         | description                                                                                                            |\n|----------------|------------------------------------------------------------------------------------------------------------------------|\n| placed         | The order has been placed but has not yet left the warehouse                                                           |\n| shipped        | The order has ben shipped to the customer and is currently in transit                                                  |\n| completed      | The order has been received by the customer                                                                            |\n| return_pending | The customer has indicated that they would like to return the order, but it has not yet been received at the warehouse |\n| returned       | The order has been returned by the customer and received at the warehouse                                              |',
                        tablesReferences: ['orders'],
                    },
                    order_id: {
                        sql: '${TABLE}.order_id',
                        name: 'order_id',
                        type: DimensionType.NUMBER,
                        index: 0,
                        label: 'Order id',
                        table: 'orders',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Orders',
                        compiledSql: '"orders".order_id',
                        description: 'This is a unique identifier for an order',
                        tablesReferences: ['orders'],
                    },
                    order_date: {
                        sql: '${TABLE}.order_date',
                        name: 'order_date',
                        type: DimensionType.DATE,
                        index: 3,
                        label: 'Order date',
                        table: 'orders',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Orders',
                        compiledSql: '"orders".order_date',
                        description: 'Date (UTC) that the order was placed',
                        tablesReferences: ['orders'],
                    },
                    customer_id: {
                        sql: '${TABLE}.customer_id',
                        name: 'customer_id',
                        type: DimensionType.NUMBER,
                        index: 2,
                        label: 'Customer id',
                        table: 'orders',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Orders',
                        compiledSql: '"orders".customer_id',
                        description: 'Foreign key to the customers table',
                        tablesReferences: ['orders'],
                    },
                    is_completed: {
                        sql: '${TABLE}.is_completed',
                        name: 'is_completed',
                        type: DimensionType.BOOLEAN,
                        index: 1,
                        label: 'Is completed',
                        table: 'orders',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Orders',
                        compiledSql: '"orders".is_completed',
                        description:
                            'Boolean indicating if status is completed',
                        tablesReferences: ['orders'],
                    },
                    coupon_amount: {
                        sql: '${TABLE}.coupon_amount',
                        name: 'coupon_amount',
                        type: DimensionType.NUMBER,
                        index: 7,
                        label: 'Coupon amount',
                        table: 'orders',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Orders',
                        compiledSql: '"orders".coupon_amount',
                        description:
                            'Amount of the order (AUD) paid for by coupon',
                        tablesReferences: ['orders'],
                    },
                    order_date_DAY: {
                        sql: "DATE_TRUNC('DAY', ${TABLE}.order_date)",
                        name: 'order_date_day',
                        type: DimensionType.DATE,
                        group: 'order_date',
                        index: 3,
                        label: 'Order date day',
                        table: 'orders',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Orders',
                        compiledSql: 'DATE_TRUNC(\'DAY\', "orders".order_date)',
                        description: 'Date (UTC) that the order was placed',
                        timeInterval: TimeFrames.DAY,
                        tablesReferences: ['orders'],
                    },
                    order_date_WEEK: {
                        sql: "DATE_TRUNC('WEEK', ${TABLE}.order_date)",
                        name: 'order_date_week',
                        type: DimensionType.DATE,
                        group: 'order_date',
                        index: 3,
                        label: 'Order date week',
                        table: 'orders',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Orders',
                        compiledSql:
                            'DATE_TRUNC(\'WEEK\', "orders".order_date)',
                        description: 'Date (UTC) that the order was placed',
                        timeInterval: TimeFrames.WEEK,
                        tablesReferences: ['orders'],
                    },
                    order_date_YEAR: {
                        sql: "DATE_TRUNC('YEAR', ${TABLE}.order_date)",
                        name: 'order_date_year',
                        type: DimensionType.DATE,
                        group: 'order_date',
                        index: 3,
                        label: 'Order date year',
                        table: 'orders',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Orders',
                        compiledSql:
                            'DATE_TRUNC(\'YEAR\', "orders".order_date)',
                        description: 'Date (UTC) that the order was placed',
                        timeInterval: TimeFrames.YEAR,
                        tablesReferences: ['orders'],
                    },
                    gift_card_amount: {
                        sql: '${TABLE}.gift_card_amount',
                        name: 'gift_card_amount',
                        type: DimensionType.NUMBER,
                        index: 9,
                        label: 'Gift card amount',
                        table: 'orders',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Orders',
                        compiledSql: '"orders".gift_card_amount',
                        description:
                            'Amount of the order (AUD) paid for by gift card',
                        tablesReferences: ['orders'],
                    },
                    order_date_MONTH: {
                        sql: "DATE_TRUNC('MONTH', ${TABLE}.order_date)",
                        name: 'order_date_month',
                        type: DimensionType.DATE,
                        group: 'order_date',
                        index: 3,
                        label: 'Order date month',
                        table: 'orders',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Orders',
                        compiledSql:
                            'DATE_TRUNC(\'MONTH\', "orders".order_date)',
                        description: 'Date (UTC) that the order was placed',
                        timeInterval: TimeFrames.MONTH,
                        tablesReferences: ['orders'],
                    },
                    credit_card_amount: {
                        sql: '${TABLE}.credit_card_amount',
                        name: 'credit_card_amount',
                        type: DimensionType.NUMBER,
                        index: 6,
                        label: 'Credit card amount',
                        table: 'orders',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Orders',
                        compiledSql: '"orders".credit_card_amount',
                        description:
                            'Amount of the order (AUD) paid for by credit card',
                        tablesReferences: ['orders'],
                    },
                    bank_transfer_amount: {
                        sql: '${TABLE}.bank_transfer_amount',
                        name: 'bank_transfer_amount',
                        type: DimensionType.NUMBER,
                        index: 8,
                        label: 'Bank transfer amount',
                        table: 'orders',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Orders',
                        compiledSql: '"orders".bank_transfer_amount',
                        description:
                            'Amount of the order (AUD) paid for by bank transfer',
                        tablesReferences: ['orders'],
                    },
                },
                description:
                    'This table has basic information about orders, as well as some derived facts based on payments',
                lineageGraph: {
                    orders: [
                        { name: 'stg_orders', type: 'model' },
                        { name: 'stg_payments', type: 'model' },
                    ],
                    stg_orders: [],
                    stg_payments: [],
                },
                orderFieldsBy: OrderFieldsByStrategy.LABEL,
            },
            customers: {
                name: 'customers',
                label: 'Customers',
                schema: 'jaffle',
                metrics: {
                    dbt_derived: {
                        sql: '${unique_customer_count} / ${unique_customer_count}',
                        name: 'dbt_derived',
                        type: MetricType.NUMBER,
                        index: 2,
                        label: 'dbt_derived',
                        table: 'customers',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Customers',
                        compiledSql:
                            '(COUNT(DISTINCT "customers".customer_id)) / (COUNT(DISTINCT "customers".customer_id))',
                        description: '',
                        isAutoGenerated: false,
                        tablesReferences: ['customers'],
                    },
                    dbt_expression: {
                        sql: '${unique_customer_count} / ${unique_customer_count}',
                        name: 'dbt_expression',
                        type: MetricType.NUMBER,
                        index: 1,
                        label: 'dbt_expression',
                        table: 'customers',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Customers',
                        compiledSql:
                            '(COUNT(DISTINCT "customers".customer_id)) / (COUNT(DISTINCT "customers".customer_id))',
                        description: 'derived metric in v1.2 ( deprecated )',
                        isAutoGenerated: false,
                        tablesReferences: ['customers'],
                    },
                    unique_customer_count: {
                        sql: '${TABLE}.customer_id',
                        name: 'unique_customer_count',
                        type: MetricType.COUNT_DISTINCT,
                        index: 0,
                        label: 'Unique customer count',
                        table: 'customers',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Customers',
                        compiledSql: 'COUNT(DISTINCT "customers".customer_id)',
                        description: 'Total number of customers',
                        isAutoGenerated: false,
                        tablesReferences: ['customers'],
                    },
                    date_of_first_created_customer: {
                        sql: '${TABLE}.created',
                        name: 'date_of_first_created_customer',
                        type: MetricType.MIN,
                        index: 3,
                        label: 'Date of first created customer',
                        table: 'customers',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Customers',
                        compiledSql: 'MIN("customers".created)',
                        description: 'Min of Created',
                        isAutoGenerated: false,
                        tablesReferences: ['customers'],
                    },
                    date_of_most_recent_created_customer: {
                        sql: '${TABLE}.created',
                        name: 'date_of_most_recent_created_customer',
                        type: MetricType.MAX,
                        index: 4,
                        label: 'Date of most recent created customer',
                        table: 'customers',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Customers',
                        compiledSql: 'MAX("customers".created)',
                        description: 'Max of Created',
                        isAutoGenerated: false,
                        tablesReferences: ['customers'],
                    },
                },
                database: 'postgres',
                sqlTable: '"postgres"."jaffle"."customers"',
                dimensions: {
                    created: {
                        sql: '${TABLE}.created',
                        name: 'created',
                        type: DimensionType.TIMESTAMP,
                        index: 3,
                        label: 'Created',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".created',
                        description:
                            'Timestamp (UTC) when customer was created',
                        tablesReferences: ['customers'],
                    },
                    last_name: {
                        sql: '${TABLE}.last_name',
                        name: 'last_name',
                        type: DimensionType.STRING,
                        index: 2,
                        label: 'Last name',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".last_name',
                        description: "Customer's last name. PII.",
                        tablesReferences: ['customers'],
                    },
                    first_name: {
                        sql: '${TABLE}.first_name',
                        name: 'first_name',
                        type: DimensionType.STRING,
                        urls: [
                            {
                                url: 'https://example.com/company/${value.formatted | url_encode }',
                                label: 'URL from value',
                            },
                            {
                                url: 'https://example.com/company/${row.customers.customer_id.raw | url_encode }',
                                label: 'URL from row value',
                            },
                            {
                                url: 'https://example.com/company/${row.customer_id.raw | url_encode }',
                                label: 'Invalid URL with bad reference',
                            },
                        ],
                        index: 1,
                        label: 'First name',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".first_name',
                        description: "Customer's first name. PII.",
                        tablesReferences: ['customers'],
                    },
                    created_DAY: {
                        sql: "DATE_TRUNC('DAY', ${TABLE}.created)",
                        name: 'created_day',
                        type: DimensionType.DATE,
                        group: 'created',
                        index: 3,
                        label: 'Created day',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: 'DATE_TRUNC(\'DAY\', "customers".created)',
                        description:
                            'Timestamp (UTC) when customer was created',
                        timeInterval: TimeFrames.DAY,
                        tablesReferences: ['customers'],
                    },
                    created_RAW: {
                        sql: '${TABLE}.created',
                        name: 'created_raw',
                        type: DimensionType.TIMESTAMP,
                        group: 'created',
                        index: 3,
                        label: 'Created raw',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".created',
                        description:
                            'Timestamp (UTC) when customer was created',
                        timeInterval: TimeFrames.RAW,
                        tablesReferences: ['customers'],
                    },
                    customer_id: {
                        sql: '${TABLE}.customer_id',
                        name: 'customer_id',
                        type: DimensionType.NUMBER,
                        index: 0,
                        label: 'Customer id',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".customer_id',
                        description:
                            'This is a unique identifier for a customer',
                        tablesReferences: ['customers'],
                    },
                    first_order: {
                        sql: '${TABLE}.first_order',
                        name: 'first_order',
                        type: DimensionType.DATE,
                        index: 4,
                        label: 'First order',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".first_order',
                        description: 'Date of the customers first order',
                        tablesReferences: ['customers'],
                    },
                    created_WEEK: {
                        sql: "DATE_TRUNC('WEEK', ${TABLE}.created)",
                        name: 'created_week',
                        type: DimensionType.DATE,
                        group: 'created',
                        index: 3,
                        label: 'Created week',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'WEEK\', "customers".created)',
                        description:
                            'Timestamp (UTC) when customer was created',
                        timeInterval: TimeFrames.WEEK,
                        tablesReferences: ['customers'],
                    },
                    created_YEAR: {
                        sql: "DATE_TRUNC('YEAR', ${TABLE}.created)",
                        name: 'created_year',
                        type: DimensionType.DATE,
                        group: 'created',
                        index: 3,
                        label: 'Created year',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'YEAR\', "customers".created)',
                        description:
                            'Timestamp (UTC) when customer was created',
                        timeInterval: TimeFrames.YEAR,
                        tablesReferences: ['customers'],
                    },
                    created_MONTH: {
                        sql: "DATE_TRUNC('MONTH', ${TABLE}.created)",
                        name: 'created_month',
                        type: DimensionType.DATE,
                        group: 'created',
                        index: 3,
                        label: 'Created month',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'MONTH\', "customers".created)',
                        description:
                            'Timestamp (UTC) when customer was created',
                        timeInterval: TimeFrames.MONTH,
                        tablesReferences: ['customers'],
                    },
                    created_QUARTER: {
                        sql: "DATE_TRUNC('QUARTER', ${TABLE}.created)",
                        name: 'created_quarter',
                        type: DimensionType.DATE,
                        group: 'created',
                        index: 3,
                        label: 'Created quarter',
                        table: 'customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'QUARTER\', "customers".created)',
                        description:
                            'Timestamp (UTC) when customer was created',
                        timeInterval: TimeFrames.QUARTER,
                        tablesReferences: ['customers'],
                    },
                    first_order_DAY: {
                        sql: "DATE_TRUNC('DAY', ${TABLE}.first_order)",
                        name: 'first_order_day',
                        type: DimensionType.DATE,
                        group: 'first_order',
                        index: 4,
                        label: 'First order day',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'DAY\', "customers".first_order)',
                        description: 'Date of the customers first order',
                        timeInterval: TimeFrames.DAY,
                        tablesReferences: ['customers'],
                    },
                    first_order_WEEK: {
                        sql: "DATE_TRUNC('WEEK', ${TABLE}.first_order)",
                        name: 'first_order_week',
                        type: DimensionType.DATE,
                        group: 'first_order',
                        index: 4,
                        label: 'First order week',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'WEEK\', "customers".first_order)',
                        description: 'Date of the customers first order',
                        timeInterval: TimeFrames.WEEK,
                        tablesReferences: ['customers'],
                    },
                    first_order_YEAR: {
                        sql: "DATE_TRUNC('YEAR', ${TABLE}.first_order)",
                        name: 'first_order_year',
                        type: DimensionType.DATE,
                        group: 'first_order',
                        index: 4,
                        label: 'First order year',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'YEAR\', "customers".first_order)',
                        description: 'Date of the customers first order',
                        timeInterval: TimeFrames.YEAR,
                        tablesReferences: ['customers'],
                    },
                    number_of_orders: {
                        sql: '${TABLE}.number_of_orders',
                        name: 'number_of_orders',
                        type: DimensionType.NUMBER,
                        index: 8,
                        label: 'Number of orders',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".number_of_orders',
                        description: '',
                        tablesReferences: ['customers'],
                    },
                    first_order_MONTH: {
                        sql: "DATE_TRUNC('MONTH', ${TABLE}.first_order)",
                        name: 'first_order_month',
                        type: DimensionType.DATE,
                        group: 'first_order',
                        index: 4,
                        label: 'First order month',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'MONTH\', "customers".first_order)',
                        description: 'Date of the customers first order',
                        timeInterval: TimeFrames.MONTH,
                        tablesReferences: ['customers'],
                    },
                    most_recent_order: {
                        sql: '${TABLE}.most_recent_order',
                        name: 'most_recent_order',
                        type: DimensionType.DATE,
                        index: 5,
                        label: 'Most recent order',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".most_recent_order',
                        description: 'Date of the customers most recent order',
                        tablesReferences: ['customers'],
                    },
                    days_since_last_order: {
                        sql: '${TABLE}.days_since_last_order',
                        name: 'days_since_last_order',
                        type: DimensionType.NUMBER,
                        index: 6,
                        label: 'Days since last order',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".days_since_last_order',
                        description:
                            'Number of days since the customers last order',
                        tablesReferences: ['customers'],
                    },
                    most_recent_order_DAY: {
                        sql: "DATE_TRUNC('DAY', ${TABLE}.most_recent_order)",
                        name: 'most_recent_order_day',
                        type: DimensionType.DATE,
                        group: 'most_recent_order',
                        index: 5,
                        label: 'Most recent order day',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'DAY\', "customers".most_recent_order)',
                        description: 'Date of the customers most recent order',
                        timeInterval: TimeFrames.DAY,
                        tablesReferences: ['customers'],
                    },
                    most_recent_order_WEEK: {
                        sql: "DATE_TRUNC('WEEK', ${TABLE}.most_recent_order)",
                        name: 'most_recent_order_week',
                        type: DimensionType.DATE,
                        group: 'most_recent_order',
                        index: 5,
                        label: 'Most recent order week',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'WEEK\', "customers".most_recent_order)',
                        description: 'Date of the customers most recent order',
                        timeInterval: TimeFrames.WEEK,
                        tablesReferences: ['customers'],
                    },
                    most_recent_order_YEAR: {
                        sql: "DATE_TRUNC('YEAR', ${TABLE}.most_recent_order)",
                        name: 'most_recent_order_year',
                        type: DimensionType.DATE,
                        group: 'most_recent_order',
                        index: 5,
                        label: 'Most recent order year',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'YEAR\', "customers".most_recent_order)',
                        description: 'Date of the customers most recent order',
                        timeInterval: TimeFrames.YEAR,
                        tablesReferences: ['customers'],
                    },
                    customer_lifetime_value: {
                        sql: '${TABLE}.customer_lifetime_value',
                        name: 'customer_lifetime_value',
                        type: DimensionType.NUMBER,
                        index: 9,
                        label: 'Customer lifetime value',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql: '"customers".customer_lifetime_value',
                        description: '',
                        tablesReferences: ['customers'],
                    },
                    most_recent_order_MONTH: {
                        sql: "DATE_TRUNC('MONTH', ${TABLE}.most_recent_order)",
                        name: 'most_recent_order_month',
                        type: DimensionType.DATE,
                        group: 'most_recent_order',
                        index: 5,
                        label: 'Most recent order month',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            'DATE_TRUNC(\'MONTH\', "customers".most_recent_order)',
                        description: 'Date of the customers most recent order',
                        timeInterval: TimeFrames.MONTH,
                        tablesReferences: ['customers'],
                    },
                    days_between_created_and_first_order: {
                        sql: '${TABLE}.days_between_created_and_first_order',
                        name: 'days_between_created_and_first_order',
                        type: DimensionType.NUMBER,
                        index: 7,
                        label: 'Days between created and first order',
                        table: 'customers',
                        hidden: true,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Customers',
                        compiledSql:
                            '"customers".days_between_created_and_first_order',
                        description:
                            'Number of days between the customer being created and making their first order',
                        tablesReferences: ['customers'],
                    },
                },
                description:
                    "This table has basic information about a customer, as well as some derived facts based on a customer's orders",
                lineageGraph: {
                    customers: [
                        { name: 'stg_customers', type: 'model' },
                        { name: 'stg_orders', type: 'model' },
                        { name: 'stg_payments', type: 'model' },
                    ],
                    stg_orders: [],
                    stg_payments: [],
                    stg_customers: [],
                },
                orderFieldsBy: OrderFieldsByStrategy.LABEL,
            },
        },
        baseTable: 'orders',
        joinedTables: [
            {
                sqlOn: '${customers.customer_id} = ${orders.customer_id}',
                table: 'customers',
                compiledSqlOn:
                    '("customers".customer_id) = ("orders".customer_id)',
            },
        ],
        targetDatabase: SupportedDbtAdapter.POSTGRES,
    },
    {
        name: 'events',
        tags: [],
        label: 'Events',
        tables: {
            events: {
                name: 'events',
                label: 'Events',
                schema: 'jaffle',
                metrics: {
                    count: {
                        sql: '${TABLE}.event',
                        name: 'count',
                        type: MetricType.COUNT,
                        index: 0,
                        label: 'Count',
                        table: 'events',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Events',
                        compiledSql: 'COUNT("events".event)',
                        description: 'Count of Event',
                        isAutoGenerated: false,
                        tablesReferences: ['events'],
                    },
                    in_km: {
                        sql: '${TABLE}.event_id',
                        name: 'in_km',
                        type: MetricType.SUM,
                        index: 9,
                        label: 'In km',
                        table: 'events',
                        format: 'km',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Events',
                        compiledSql: 'SUM("events".event_id)',
                        description: 'Sum of Event id',
                        isAutoGenerated: false,
                        tablesReferences: ['events'],
                    },
                    in_mi: {
                        sql: '${TABLE}.event_id',
                        name: 'in_mi',
                        type: MetricType.SUM,
                        index: 8,
                        label: 'In mi',
                        table: 'events',
                        format: 'mi',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Events',
                        compiledSql: 'SUM("events".event_id)',
                        description: 'Sum of Event id',
                        isAutoGenerated: false,
                        tablesReferences: ['events'],
                    },
                    in_eur: {
                        sql: '${TABLE}.event_id',
                        name: 'in_eur',
                        type: MetricType.SUM,
                        index: 2,
                        label: 'In eur',
                        table: 'events',
                        format: 'eur',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Events',
                        compiledSql: 'SUM("events".event_id)',
                        description: 'Sum of Event id',
                        isAutoGenerated: false,
                        tablesReferences: ['events'],
                    },
                    in_gbp: {
                        sql: '${TABLE}.event_id',
                        name: 'in_gbp',
                        type: MetricType.SUM,
                        index: 1,
                        label: 'In gbp',
                        table: 'events',
                        format: 'gbp',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Events',
                        compiledSql: 'SUM("events".event_id)',
                        description: 'Sum of Event id',
                        isAutoGenerated: false,
                        tablesReferences: ['events'],
                    },
                    median: {
                        sql: '${TABLE}.event_id',
                        name: 'median',
                        type: MetricType.MEDIAN,
                        index: 18,
                        label: 'Median',
                        table: 'events',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Events',
                        compiledSql:
                            'PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY "events".event_id)',
                        description: 'Median of Event id',
                        isAutoGenerated: false,
                        tablesReferences: ['events'],
                    },
                    in_percent: {
                        sql: '${TABLE}.event_id',
                        name: 'in_percent',
                        type: MetricType.SUM,
                        index: 10,
                        label: 'In percent',
                        table: 'events',
                        format: 'percent',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Events',
                        compiledSql: 'SUM("events".event_id)',
                        description: 'Sum of Event id',
                        isAutoGenerated: false,
                        tablesReferences: ['events'],
                    },
                    in_billions: {
                        sql: '${TABLE}.event_id',
                        name: 'in_billions',
                        type: MetricType.SUM,
                        index: 13,
                        label: 'In billions',
                        table: 'events',
                        hidden: false,
                        compact: Compact.BILLIONS,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Events',
                        compiledSql: 'SUM("events".event_id)',
                        description: 'Sum of Event id',
                        isAutoGenerated: false,
                        tablesReferences: ['events'],
                    },
                    in_millions: {
                        sql: '${TABLE}.event_id',
                        name: 'in_millions',
                        type: MetricType.SUM,
                        index: 12,
                        label: 'In millions',
                        table: 'events',
                        hidden: false,
                        compact: Compact.MILLIONS,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Events',
                        compiledSql: 'SUM("events".event_id)',
                        description: 'Sum of Event id',
                        isAutoGenerated: false,
                        tablesReferences: ['events'],
                    },
                    in_thousands: {
                        sql: '${TABLE}.event_id',
                        name: 'in_thousands',
                        type: MetricType.SUM,
                        index: 11,
                        label: 'In thousands',
                        table: 'events',
                        hidden: false,
                        compact: Compact.THOUSANDS,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Events',
                        compiledSql: 'SUM("events".event_id)',
                        description: 'Sum of Event id',
                        isAutoGenerated: false,
                        tablesReferences: ['events'],
                    },
                    in_trillions: {
                        sql: '${TABLE}.event_id',
                        name: 'in_trillions',
                        type: MetricType.SUM,
                        index: 14,
                        label: 'In trillions',
                        table: 'events',
                        hidden: false,
                        compact: Compact.TRILLIONS,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Events',
                        compiledSql: 'SUM("events".event_id)',
                        description: 'Sum of Event id',
                        isAutoGenerated: false,
                        tablesReferences: ['events'],
                    },
                    with_round_2: {
                        sql: '${TABLE}.event_id',
                        name: 'with_round_2',
                        type: MetricType.SUM,
                        index: 5,
                        label: 'With round 2',
                        round: 2,
                        table: 'events',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Events',
                        compiledSql: 'SUM("events".event_id)',
                        description: 'Sum of Event id',
                        isAutoGenerated: false,
                        tablesReferences: ['events'],
                    },
                    percentile_25: {
                        sql: '${TABLE}.event_id',
                        name: 'percentile_25',
                        type: MetricType.PERCENTILE,
                        index: 15,
                        label: 'Percentile 25',
                        table: 'events',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        percentile: 25,
                        tableLabel: 'Events',
                        compiledSql:
                            'PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY "events".event_id)',
                        description: 'Percentile of Event id',
                        isAutoGenerated: false,
                        tablesReferences: ['events'],
                    },
                    percentile_50: {
                        sql: '${TABLE}.event_id',
                        name: 'percentile_50',
                        type: MetricType.PERCENTILE,
                        index: 16,
                        label: 'Percentile 50',
                        table: 'events',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        percentile: 50,
                        tableLabel: 'Events',
                        compiledSql:
                            'PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY "events".event_id)',
                        description: 'Percentile of Event id',
                        isAutoGenerated: false,
                        tablesReferences: ['events'],
                    },
                    percentile_75: {
                        sql: '${TABLE}.event_id',
                        name: 'percentile_75',
                        type: MetricType.PERCENTILE,
                        index: 17,
                        label: 'Percentile 75',
                        table: 'events',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        percentile: 75,
                        tableLabel: 'Events',
                        compiledSql:
                            'PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY "events".event_id)',
                        description: 'Percentile of Event id',
                        isAutoGenerated: false,
                        tablesReferences: ['events'],
                    },
                    in_eur_with_round_0: {
                        sql: '${TABLE}.event_id',
                        name: 'in_eur_with_round_0',
                        type: MetricType.SUM,
                        index: 4,
                        label: 'In eur with round 0',
                        round: 0,
                        table: 'events',
                        format: 'eur',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Events',
                        compiledSql: 'SUM("events".event_id)',
                        description: 'Sum of Event id',
                        isAutoGenerated: false,
                        tablesReferences: ['events'],
                    },
                    in_eur_with_round_2: {
                        sql: '${TABLE}.event_id',
                        name: 'in_eur_with_round_2',
                        type: MetricType.SUM,
                        index: 3,
                        label: 'In eur with round 2',
                        round: 2,
                        table: 'events',
                        format: 'eur',
                        hidden: false,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Events',
                        compiledSql: 'SUM("events".event_id)',
                        description: 'Sum of Event id',
                        isAutoGenerated: false,
                        tablesReferences: ['events'],
                    },
                    in_thousands_of_eur: {
                        sql: '${TABLE}.event_id',
                        name: 'in_thousands_of_eur',
                        type: MetricType.SUM,
                        index: 6,
                        label: 'In thousands of eur',
                        table: 'events',
                        format: 'eur',
                        hidden: false,
                        compact: Compact.THOUSANDS,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Events',
                        compiledSql: 'SUM("events".event_id)',
                        description: 'Sum of Event id',
                        isAutoGenerated: false,
                        tablesReferences: ['events'],
                    },
                    in_thousands_of_eur_with_round_0: {
                        sql: '${TABLE}.event_id',
                        name: 'in_thousands_of_eur_with_round_0',
                        type: MetricType.SUM,
                        index: 7,
                        label: 'In thousands of eur with round 0',
                        round: 0,
                        table: 'events',
                        format: 'eur',
                        hidden: false,
                        compact: Compact.THOUSANDS,
                        filters: [],
                        fieldType: FieldType.METRIC,
                        tableLabel: 'Events',
                        compiledSql: 'SUM("events".event_id)',
                        description: 'Sum of Event id',
                        isAutoGenerated: false,
                        tablesReferences: ['events'],
                    },
                },
                database: 'postgres',
                sqlTable: '"postgres"."jaffle"."events"',
                dimensions: {
                    date: {
                        sql: '${TABLE}.date',
                        name: 'date',
                        type: DimensionType.DATE,
                        urls: [
                            {
                                url: 'https://calendar.google.com/calendar/u/0/r/day/${ value.formatted |split: "-" |join: "/"}',
                                label: 'Open in Google Calendar',
                            },
                        ],
                        index: 3,
                        label: 'Date',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql: '"events".date',
                        description: '',
                        tablesReferences: ['events'],
                    },
                    event: {
                        sql: '${TABLE}.event',
                        name: 'event',
                        type: DimensionType.STRING,
                        index: 4,
                        label: 'Event',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql: '"events".event',
                        description: '',
                        tablesReferences: ['events'],
                    },
                    date_DAY: {
                        sql: "DATE_TRUNC('DAY', ${TABLE}.date)",
                        name: 'date_day',
                        type: DimensionType.DATE,
                        urls: [
                            {
                                url: 'https://calendar.google.com/calendar/u/0/r/day/${ value.formatted |split: "-" |join: "/"}',
                                label: 'Open in Google Calendar',
                            },
                        ],
                        group: 'date',
                        index: 3,
                        label: 'Date day',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql: 'DATE_TRUNC(\'DAY\', "events".date)',
                        description: '',
                        timeInterval: TimeFrames.DAY,
                        tablesReferences: ['events'],
                    },
                    event_id: {
                        sql: '${TABLE}.event_id',
                        name: 'event_id',
                        type: DimensionType.NUMBER,
                        index: 5,
                        label: 'Event id',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql: '"events".event_id',
                        description: '',
                        tablesReferences: ['events'],
                    },
                    date_WEEK: {
                        sql: "DATE_TRUNC('WEEK', ${TABLE}.date)",
                        name: 'date_week',
                        type: DimensionType.DATE,
                        urls: [
                            {
                                url: 'https://calendar.google.com/calendar/u/0/r/day/${ value.formatted |split: "-" |join: "/"}',
                                label: 'Open in Google Calendar',
                            },
                        ],
                        group: 'date',
                        index: 3,
                        label: 'Date week',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql: 'DATE_TRUNC(\'WEEK\', "events".date)',
                        description: '',
                        timeInterval: TimeFrames.WEEK,
                        tablesReferences: ['events'],
                    },
                    date_YEAR: {
                        sql: "DATE_TRUNC('YEAR', ${TABLE}.date)",
                        name: 'date_year',
                        type: DimensionType.DATE,
                        urls: [
                            {
                                url: 'https://calendar.google.com/calendar/u/0/r/day/${ value.formatted |split: "-" |join: "/"}',
                                label: 'Open in Google Calendar',
                            },
                        ],
                        group: 'date',
                        index: 3,
                        label: 'Date year',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql: 'DATE_TRUNC(\'YEAR\', "events".date)',
                        description: '',
                        timeInterval: TimeFrames.YEAR,
                        tablesReferences: ['events'],
                    },
                    date_MONTH: {
                        sql: "DATE_TRUNC('MONTH', ${TABLE}.date)",
                        name: 'date_month',
                        type: DimensionType.DATE,
                        urls: [
                            {
                                url: 'https://calendar.google.com/calendar/u/0/r/day/${ value.formatted |split: "-" |join: "/"}',
                                label: 'Open in Google Calendar',
                            },
                        ],
                        group: 'date',
                        index: 3,
                        label: 'Date month',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql: 'DATE_TRUNC(\'MONTH\', "events".date)',
                        description: '',
                        timeInterval: TimeFrames.MONTH,
                        tablesReferences: ['events'],
                    },
                    timestamp_tz: {
                        sql: '${TABLE}.timestamp_tz',
                        name: 'timestamp_tz',
                        type: DimensionType.TIMESTAMP,
                        index: 0,
                        label: 'Timestamp tz',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql: '"events".timestamp_tz',
                        description: '',
                        tablesReferences: ['events'],
                    },
                    timestamp_ltz: {
                        sql: '${TABLE}.timestamp_ltz',
                        name: 'timestamp_ltz',
                        type: DimensionType.TIMESTAMP,
                        index: 2,
                        label: 'Timestamp ltz',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql: '"events".timestamp_ltz',
                        description: '',
                        tablesReferences: ['events'],
                    },
                    timestamp_ntz: {
                        sql: '${TABLE}.timestamp_ntz',
                        name: 'timestamp_ntz',
                        type: DimensionType.TIMESTAMP,
                        index: 1,
                        label: 'Timestamp ntz',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql: '"events".timestamp_ntz',
                        description: '',
                        tablesReferences: ['events'],
                    },
                    timestamp_tz_DAY: {
                        sql: "DATE_TRUNC('DAY', ${TABLE}.timestamp_tz)",
                        name: 'timestamp_tz_day',
                        type: DimensionType.DATE,
                        group: 'timestamp_tz',
                        index: 0,
                        label: 'Timestamp tz day',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql:
                            'DATE_TRUNC(\'DAY\', "events".timestamp_tz)',
                        description: '',
                        timeInterval: TimeFrames.DAY,
                        tablesReferences: ['events'],
                    },
                    timestamp_tz_RAW: {
                        sql: '${TABLE}.timestamp_tz',
                        name: 'timestamp_tz_raw',
                        type: DimensionType.TIMESTAMP,
                        group: 'timestamp_tz',
                        index: 0,
                        label: 'Timestamp tz raw',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql: '"events".timestamp_tz',
                        description: '',
                        timeInterval: TimeFrames.RAW,
                        tablesReferences: ['events'],
                    },
                    timestamp_ltz_DAY: {
                        sql: "DATE_TRUNC('DAY', ${TABLE}.timestamp_ltz)",
                        name: 'timestamp_ltz_day',
                        type: DimensionType.DATE,
                        group: 'timestamp_ltz',
                        index: 2,
                        label: 'Timestamp ltz day',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql:
                            'DATE_TRUNC(\'DAY\', "events".timestamp_ltz)',
                        description: '',
                        timeInterval: TimeFrames.DAY,
                        tablesReferences: ['events'],
                    },
                    timestamp_ltz_RAW: {
                        sql: '${TABLE}.timestamp_ltz',
                        name: 'timestamp_ltz_raw',
                        type: DimensionType.TIMESTAMP,
                        group: 'timestamp_ltz',
                        index: 2,
                        label: 'Timestamp ltz raw',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql: '"events".timestamp_ltz',
                        description: '',
                        timeInterval: TimeFrames.RAW,
                        tablesReferences: ['events'],
                    },
                    timestamp_ntz_DAY: {
                        sql: "DATE_TRUNC('DAY', ${TABLE}.timestamp_ntz)",
                        name: 'timestamp_ntz_day',
                        type: DimensionType.DATE,
                        group: 'timestamp_ntz',
                        index: 1,
                        label: 'Timestamp ntz day',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql:
                            'DATE_TRUNC(\'DAY\', "events".timestamp_ntz)',
                        description: '',
                        timeInterval: TimeFrames.DAY,
                        tablesReferences: ['events'],
                    },
                    timestamp_ntz_RAW: {
                        sql: '${TABLE}.timestamp_ntz',
                        name: 'timestamp_ntz_raw',
                        type: DimensionType.TIMESTAMP,
                        group: 'timestamp_ntz',
                        index: 1,
                        label: 'Timestamp ntz raw',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql: '"events".timestamp_ntz',
                        description: '',
                        timeInterval: TimeFrames.RAW,
                        tablesReferences: ['events'],
                    },
                    timestamp_tz_HOUR: {
                        sql: "DATE_TRUNC('HOUR', ${TABLE}.timestamp_tz)",
                        name: 'timestamp_tz_hour',
                        type: DimensionType.TIMESTAMP,
                        group: 'timestamp_tz',
                        index: 0,
                        label: 'Timestamp tz hour',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql:
                            'DATE_TRUNC(\'HOUR\', "events".timestamp_tz)',
                        description: '',
                        timeInterval: TimeFrames.HOUR,
                        tablesReferences: ['events'],
                    },
                    timestamp_tz_WEEK: {
                        sql: "DATE_TRUNC('WEEK', ${TABLE}.timestamp_tz)",
                        name: 'timestamp_tz_week',
                        type: DimensionType.DATE,
                        group: 'timestamp_tz',
                        index: 0,
                        label: 'Timestamp tz week',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql:
                            'DATE_TRUNC(\'WEEK\', "events".timestamp_tz)',
                        description: '',
                        timeInterval: TimeFrames.WEEK,
                        tablesReferences: ['events'],
                    },
                    timestamp_tz_YEAR: {
                        sql: "DATE_TRUNC('YEAR', ${TABLE}.timestamp_tz)",
                        name: 'timestamp_tz_year',
                        type: DimensionType.DATE,
                        group: 'timestamp_tz',
                        index: 0,
                        label: 'Timestamp tz year',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql:
                            'DATE_TRUNC(\'YEAR\', "events".timestamp_tz)',
                        description: '',
                        timeInterval: TimeFrames.YEAR,
                        tablesReferences: ['events'],
                    },
                    timestamp_ltz_WEEK: {
                        sql: "DATE_TRUNC('WEEK', ${TABLE}.timestamp_ltz)",
                        name: 'timestamp_ltz_week',
                        type: DimensionType.DATE,
                        group: 'timestamp_ltz',
                        index: 2,
                        label: 'Timestamp ltz week',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql:
                            'DATE_TRUNC(\'WEEK\', "events".timestamp_ltz)',
                        description: '',
                        timeInterval: TimeFrames.WEEK,
                        tablesReferences: ['events'],
                    },
                    timestamp_ltz_YEAR: {
                        sql: "DATE_TRUNC('YEAR', ${TABLE}.timestamp_ltz)",
                        name: 'timestamp_ltz_year',
                        type: DimensionType.DATE,
                        group: 'timestamp_ltz',
                        index: 2,
                        label: 'Timestamp ltz year',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql:
                            'DATE_TRUNC(\'YEAR\', "events".timestamp_ltz)',
                        description: '',
                        timeInterval: TimeFrames.YEAR,
                        tablesReferences: ['events'],
                    },
                    timestamp_ntz_WEEK: {
                        sql: "DATE_TRUNC('WEEK', ${TABLE}.timestamp_ntz)",
                        name: 'timestamp_ntz_week',
                        type: DimensionType.DATE,
                        group: 'timestamp_ntz',
                        index: 1,
                        label: 'Timestamp ntz week',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql:
                            'DATE_TRUNC(\'WEEK\', "events".timestamp_ntz)',
                        description: '',
                        timeInterval: TimeFrames.WEEK,
                        tablesReferences: ['events'],
                    },
                    timestamp_ntz_YEAR: {
                        sql: "DATE_TRUNC('YEAR', ${TABLE}.timestamp_ntz)",
                        name: 'timestamp_ntz_year',
                        type: DimensionType.DATE,
                        group: 'timestamp_ntz',
                        index: 1,
                        label: 'Timestamp ntz year',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql:
                            'DATE_TRUNC(\'YEAR\', "events".timestamp_ntz)',
                        description: '',
                        timeInterval: TimeFrames.YEAR,
                        tablesReferences: ['events'],
                    },
                    timestamp_tz_MONTH: {
                        sql: "DATE_TRUNC('MONTH', ${TABLE}.timestamp_tz)",
                        name: 'timestamp_tz_month',
                        type: DimensionType.DATE,
                        group: 'timestamp_tz',
                        index: 0,
                        label: 'Timestamp tz month',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql:
                            'DATE_TRUNC(\'MONTH\', "events".timestamp_tz)',
                        description: '',
                        timeInterval: TimeFrames.MONTH,
                        tablesReferences: ['events'],
                    },
                    timestamp_ltz_MONTH: {
                        sql: "DATE_TRUNC('MONTH', ${TABLE}.timestamp_ltz)",
                        name: 'timestamp_ltz_month',
                        type: DimensionType.DATE,
                        group: 'timestamp_ltz',
                        index: 2,
                        label: 'Timestamp ltz month',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql:
                            'DATE_TRUNC(\'MONTH\', "events".timestamp_ltz)',
                        description: '',
                        timeInterval: TimeFrames.MONTH,
                        tablesReferences: ['events'],
                    },
                    timestamp_ntz_MONTH: {
                        sql: "DATE_TRUNC('MONTH', ${TABLE}.timestamp_ntz)",
                        name: 'timestamp_ntz_month',
                        type: DimensionType.DATE,
                        group: 'timestamp_ntz',
                        index: 1,
                        label: 'Timestamp ntz month',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql:
                            'DATE_TRUNC(\'MONTH\', "events".timestamp_ntz)',
                        description: '',
                        timeInterval: TimeFrames.MONTH,
                        tablesReferences: ['events'],
                    },
                    timestamp_tz_MINUTE: {
                        sql: "DATE_TRUNC('MINUTE', ${TABLE}.timestamp_tz)",
                        name: 'timestamp_tz_minute',
                        type: DimensionType.TIMESTAMP,
                        group: 'timestamp_tz',
                        index: 0,
                        label: 'Timestamp tz minute',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql:
                            'DATE_TRUNC(\'MINUTE\', "events".timestamp_tz)',
                        description: '',
                        timeInterval: TimeFrames.MINUTE,
                        tablesReferences: ['events'],
                    },
                    timestamp_tz_SECOND: {
                        sql: "DATE_TRUNC('SECOND', ${TABLE}.timestamp_tz)",
                        name: 'timestamp_tz_second',
                        type: DimensionType.TIMESTAMP,
                        group: 'timestamp_tz',
                        index: 0,
                        label: 'Timestamp tz second',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql:
                            'DATE_TRUNC(\'SECOND\', "events".timestamp_tz)',
                        description: '',
                        timeInterval: TimeFrames.SECOND,
                        tablesReferences: ['events'],
                    },
                    timestamp_tz_QUARTER: {
                        sql: "DATE_TRUNC('QUARTER', ${TABLE}.timestamp_tz)",
                        name: 'timestamp_tz_quarter',
                        type: DimensionType.DATE,
                        group: 'timestamp_tz',
                        index: 0,
                        label: 'Timestamp tz quarter',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql:
                            'DATE_TRUNC(\'QUARTER\', "events".timestamp_tz)',
                        description: '',
                        timeInterval: TimeFrames.QUARTER,
                        tablesReferences: ['events'],
                    },
                    timestamp_ltz_QUARTER: {
                        sql: "DATE_TRUNC('QUARTER', ${TABLE}.timestamp_ltz)",
                        name: 'timestamp_ltz_quarter',
                        type: DimensionType.DATE,
                        group: 'timestamp_ltz',
                        index: 2,
                        label: 'Timestamp ltz quarter',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql:
                            'DATE_TRUNC(\'QUARTER\', "events".timestamp_ltz)',
                        description: '',
                        timeInterval: TimeFrames.QUARTER,
                        tablesReferences: ['events'],
                    },
                    timestamp_ntz_QUARTER: {
                        sql: "DATE_TRUNC('QUARTER', ${TABLE}.timestamp_ntz)",
                        name: 'timestamp_ntz_quarter',
                        type: DimensionType.DATE,
                        group: 'timestamp_ntz',
                        index: 1,
                        label: 'Timestamp ntz quarter',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql:
                            'DATE_TRUNC(\'QUARTER\', "events".timestamp_ntz)',
                        description: '',
                        timeInterval: TimeFrames.QUARTER,
                        tablesReferences: ['events'],
                    },
                    timestamp_tz_YEAR_NUM: {
                        sql: "DATE_PART('YEAR', ${TABLE}.timestamp_tz)",
                        name: 'timestamp_tz_year_num',
                        type: DimensionType.NUMBER,
                        group: 'timestamp_tz',
                        index: 0,
                        label: 'Timestamp tz year (number)',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql:
                            'DATE_PART(\'YEAR\', "events".timestamp_tz)',
                        description: '',
                        timeInterval: TimeFrames.YEAR_NUM,
                        tablesReferences: ['events'],
                    },
                    timestamp_tz_MONTH_NUM: {
                        sql: "DATE_PART('MONTH', ${TABLE}.timestamp_tz)",
                        name: 'timestamp_tz_month_num',
                        type: DimensionType.NUMBER,
                        group: 'timestamp_tz',
                        index: 0,
                        label: 'Timestamp tz month (number)',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql:
                            'DATE_PART(\'MONTH\', "events".timestamp_tz)',
                        description: '',
                        timeInterval: TimeFrames.MONTH_NUM,
                        tablesReferences: ['events'],
                    },
                    timestamp_tz_MONTH_NAME: {
                        sql: "TO_CHAR(${TABLE}.timestamp_tz, 'Month')",
                        name: 'timestamp_tz_month_name',
                        type: DimensionType.STRING,
                        group: 'timestamp_tz',
                        index: 0,
                        label: 'Timestamp tz month (name)',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql:
                            'TO_CHAR("events".timestamp_tz, \'Month\')',
                        description: '',
                        timeInterval: TimeFrames.MONTH_NAME,
                        tablesReferences: ['events'],
                    },
                    timestamp_tz_MILLISECOND: {
                        sql: "DATE_TRUNC('MILLISECOND', ${TABLE}.timestamp_tz)",
                        name: 'timestamp_tz_millisecond',
                        type: DimensionType.TIMESTAMP,
                        group: 'timestamp_tz',
                        index: 0,
                        label: 'Timestamp tz millisecond',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql:
                            'DATE_TRUNC(\'MILLISECOND\', "events".timestamp_tz)',
                        description: '',
                        timeInterval: TimeFrames.MILLISECOND,
                        tablesReferences: ['events'],
                    },
                    timestamp_tz_QUARTER_NUM: {
                        sql: "DATE_PART('QUARTER', ${TABLE}.timestamp_tz)",
                        name: 'timestamp_tz_quarter_num',
                        type: DimensionType.NUMBER,
                        group: 'timestamp_tz',
                        index: 0,
                        label: 'Timestamp tz quarter (number)',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql:
                            'DATE_PART(\'QUARTER\', "events".timestamp_tz)',
                        description: '',
                        timeInterval: TimeFrames.QUARTER_NUM,
                        tablesReferences: ['events'],
                    },
                    timestamp_tz_QUARTER_NAME: {
                        sql: 'TO_CHAR(${TABLE}.timestamp_tz, \'"Q"Q\')',
                        name: 'timestamp_tz_quarter_name',
                        type: DimensionType.STRING,
                        group: 'timestamp_tz',
                        index: 0,
                        label: 'Timestamp tz quarter (name)',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql: 'TO_CHAR("events".timestamp_tz, \'"Q"Q\')',
                        description: '',
                        timeInterval: TimeFrames.QUARTER_NAME,
                        tablesReferences: ['events'],
                    },
                    timestamp_tz_DAY_OF_YEAR_NUM: {
                        sql: "DATE_PART('DOY', ${TABLE}.timestamp_tz)",
                        name: 'timestamp_tz_day_of_year_num',
                        type: DimensionType.NUMBER,
                        group: 'timestamp_tz',
                        index: 0,
                        label: 'Timestamp tz day of the year (number)',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql:
                            'DATE_PART(\'DOY\', "events".timestamp_tz)',
                        description: '',
                        timeInterval: TimeFrames.DAY_OF_YEAR_NUM,
                        tablesReferences: ['events'],
                    },
                    timestamp_tz_DAY_OF_MONTH_NUM: {
                        sql: "DATE_PART('DAY', ${TABLE}.timestamp_tz)",
                        name: 'timestamp_tz_day_of_month_num',
                        type: DimensionType.NUMBER,
                        group: 'timestamp_tz',
                        index: 0,
                        label: 'Timestamp tz day of the month (number)',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql:
                            'DATE_PART(\'DAY\', "events".timestamp_tz)',
                        description: '',
                        timeInterval: TimeFrames.DAY_OF_MONTH_NUM,
                        tablesReferences: ['events'],
                    },
                    timestamp_tz_DAY_OF_WEEK_NAME: {
                        sql: "TO_CHAR(${TABLE}.timestamp_tz, 'Day')",
                        name: 'timestamp_tz_day_of_week_name',
                        type: DimensionType.STRING,
                        group: 'timestamp_tz',
                        index: 0,
                        label: 'Timestamp tz day of the week (name)',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql: 'TO_CHAR("events".timestamp_tz, \'Day\')',
                        description: '',
                        timeInterval: TimeFrames.DAY_OF_WEEK_NAME,
                        tablesReferences: ['events'],
                    },
                    timestamp_tz_DAY_OF_WEEK_INDEX: {
                        sql: "DATE_PART('DOW', ${TABLE}.timestamp_tz)",
                        name: 'timestamp_tz_day_of_week_index',
                        type: DimensionType.NUMBER,
                        group: 'timestamp_tz',
                        index: 0,
                        label: 'Timestamp tz day of the week (index)',
                        table: 'events',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Events',
                        compiledSql:
                            'DATE_PART(\'DOW\', "events".timestamp_tz)',
                        description: '',
                        timeInterval: TimeFrames.DAY_OF_WEEK_INDEX,
                        tablesReferences: ['events'],
                    },
                },
                description: 'events table',
                lineageGraph: { events: [] },
                orderFieldsBy: OrderFieldsByStrategy.LABEL,
            },
        },
        baseTable: 'events',
        joinedTables: [],
        targetDatabase: SupportedDbtAdapter.POSTGRES,
    },
    {
        name: 'stg_customers',
        tags: [],
        label: 'Stg customers',
        tables: {
            stg_customers: {
                name: 'stg_customers',
                label: 'Stg customers',
                schema: 'jaffle',
                metrics: {},
                database: 'postgres',
                sqlTable: '"postgres"."jaffle"."stg_customers"',
                dimensions: {
                    created: {
                        sql: '${TABLE}.created',
                        name: 'created',
                        type: DimensionType.TIMESTAMP,
                        index: 3,
                        label: 'Created',
                        table: 'stg_customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Stg customers',
                        compiledSql: '"stg_customers".created',
                        description: '',
                        tablesReferences: ['stg_customers'],
                    },
                    last_name: {
                        sql: '${TABLE}.last_name',
                        name: 'last_name',
                        type: DimensionType.STRING,
                        index: 2,
                        label: 'Last name',
                        table: 'stg_customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Stg customers',
                        compiledSql: '"stg_customers".last_name',
                        description: '',
                        tablesReferences: ['stg_customers'],
                    },
                    first_name: {
                        sql: '${TABLE}.first_name',
                        name: 'first_name',
                        type: DimensionType.STRING,
                        index: 1,
                        label: 'First name',
                        table: 'stg_customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Stg customers',
                        compiledSql: '"stg_customers".first_name',
                        description: '',
                        tablesReferences: ['stg_customers'],
                    },
                    created_DAY: {
                        sql: "DATE_TRUNC('DAY', ${TABLE}.created)",
                        name: 'created_day',
                        type: DimensionType.DATE,
                        group: 'created',
                        index: 3,
                        label: 'Created day',
                        table: 'stg_customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Stg customers',
                        compiledSql:
                            'DATE_TRUNC(\'DAY\', "stg_customers".created)',
                        description: '',
                        timeInterval: TimeFrames.DAY,
                        tablesReferences: ['stg_customers'],
                    },
                    created_RAW: {
                        sql: '${TABLE}.created',
                        name: 'created_raw',
                        type: DimensionType.TIMESTAMP,
                        group: 'created',
                        index: 3,
                        label: 'Created raw',
                        table: 'stg_customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Stg customers',
                        compiledSql: '"stg_customers".created',
                        description: '',
                        timeInterval: TimeFrames.RAW,
                        tablesReferences: ['stg_customers'],
                    },
                    customer_id: {
                        sql: '${TABLE}.customer_id',
                        name: 'customer_id',
                        type: DimensionType.NUMBER,
                        index: 0,
                        label: 'Customer id',
                        table: 'stg_customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Stg customers',
                        compiledSql: '"stg_customers".customer_id',
                        description: '',
                        tablesReferences: ['stg_customers'],
                    },
                    created_WEEK: {
                        sql: "DATE_TRUNC('WEEK', ${TABLE}.created)",
                        name: 'created_week',
                        type: DimensionType.DATE,
                        group: 'created',
                        index: 3,
                        label: 'Created week',
                        table: 'stg_customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Stg customers',
                        compiledSql:
                            'DATE_TRUNC(\'WEEK\', "stg_customers".created)',
                        description: '',
                        timeInterval: TimeFrames.WEEK,
                        tablesReferences: ['stg_customers'],
                    },
                    created_YEAR: {
                        sql: "DATE_TRUNC('YEAR', ${TABLE}.created)",
                        name: 'created_year',
                        type: DimensionType.DATE,
                        group: 'created',
                        index: 3,
                        label: 'Created year',
                        table: 'stg_customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Stg customers',
                        compiledSql:
                            'DATE_TRUNC(\'YEAR\', "stg_customers".created)',
                        description: '',
                        timeInterval: TimeFrames.YEAR,
                        tablesReferences: ['stg_customers'],
                    },
                    created_MONTH: {
                        sql: "DATE_TRUNC('MONTH', ${TABLE}.created)",
                        name: 'created_month',
                        type: DimensionType.DATE,
                        group: 'created',
                        index: 3,
                        label: 'Created month',
                        table: 'stg_customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Stg customers',
                        compiledSql:
                            'DATE_TRUNC(\'MONTH\', "stg_customers".created)',
                        description: '',
                        timeInterval: TimeFrames.MONTH,
                        tablesReferences: ['stg_customers'],
                    },
                    created_QUARTER: {
                        sql: "DATE_TRUNC('QUARTER', ${TABLE}.created)",
                        name: 'created_quarter',
                        type: DimensionType.DATE,
                        group: 'created',
                        index: 3,
                        label: 'Created quarter',
                        table: 'stg_customers',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Stg customers',
                        compiledSql:
                            'DATE_TRUNC(\'QUARTER\', "stg_customers".created)',
                        description: '',
                        timeInterval: TimeFrames.QUARTER,
                        tablesReferences: ['stg_customers'],
                    },
                },
                description: 'stg_customers table',
                lineageGraph: {
                    customers: [
                        { name: 'stg_customers', type: 'model' },
                        { name: 'stg_orders', type: 'model' },
                        { name: 'stg_payments', type: 'model' },
                    ],
                    stg_customers: [],
                },
                orderFieldsBy: OrderFieldsByStrategy.LABEL,
            },
        },
        baseTable: 'stg_customers',
        joinedTables: [],
        targetDatabase: SupportedDbtAdapter.POSTGRES,
    },
    {
        name: 'stg_payments',
        tags: [],
        label: 'Stg payments',
        tables: {
            stg_payments: {
                name: 'stg_payments',
                label: 'Stg payments',
                schema: 'jaffle',
                metrics: {},
                database: 'postgres',
                sqlTable: '"postgres"."jaffle"."stg_payments"',
                dimensions: {
                    amount: {
                        sql: '${TABLE}.amount',
                        name: 'amount',
                        type: DimensionType.NUMBER,
                        index: 3,
                        label: 'Amount',
                        table: 'stg_payments',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Stg payments',
                        compiledSql: '"stg_payments".amount',
                        description: '',
                        tablesReferences: ['stg_payments'],
                    },
                    order_id: {
                        sql: '${TABLE}.order_id',
                        name: 'order_id',
                        type: DimensionType.NUMBER,
                        index: 2,
                        label: 'Order id',
                        table: 'stg_payments',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Stg payments',
                        compiledSql: '"stg_payments".order_id',
                        description: '',
                        tablesReferences: ['stg_payments'],
                    },
                    payment_id: {
                        sql: '${TABLE}.payment_id',
                        name: 'payment_id',
                        type: DimensionType.NUMBER,
                        index: 0,
                        label: 'Payment id',
                        table: 'stg_payments',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Stg payments',
                        compiledSql: '"stg_payments".payment_id',
                        description: '',
                        tablesReferences: ['stg_payments'],
                    },
                    payment_method: {
                        sql: '${TABLE}.payment_method',
                        name: 'payment_method',
                        type: DimensionType.STRING,
                        index: 1,
                        label: 'Payment method',
                        table: 'stg_payments',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Stg payments',
                        compiledSql: '"stg_payments".payment_method',
                        description: '',
                        tablesReferences: ['stg_payments'],
                    },
                },
                description: 'stg_payments table',
                lineageGraph: {
                    orders: [
                        { name: 'stg_orders', type: 'model' },
                        { name: 'stg_payments', type: 'model' },
                    ],
                    payments: [{ name: 'stg_payments', type: 'model' }],
                    customers: [
                        { name: 'stg_customers', type: 'model' },
                        { name: 'stg_orders', type: 'model' },
                        { name: 'stg_payments', type: 'model' },
                    ],
                    stg_payments: [],
                },
                orderFieldsBy: OrderFieldsByStrategy.LABEL,
            },
        },
        baseTable: 'stg_payments',
        joinedTables: [],
        targetDatabase: SupportedDbtAdapter.POSTGRES,
    },
    {
        name: 'stg_orders',
        tags: [],
        label: 'Stg orders',
        tables: {
            stg_orders: {
                name: 'stg_orders',
                label: 'Stg orders',
                schema: 'jaffle',
                metrics: {},
                database: 'postgres',
                sqlTable: '"postgres"."jaffle"."stg_orders"',
                dimensions: {
                    status: {
                        sql: '${TABLE}.status',
                        name: 'status',
                        type: DimensionType.STRING,
                        index: 1,
                        label: 'Status',
                        table: 'stg_orders',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Stg orders',
                        compiledSql: '"stg_orders".status',
                        description: '',
                        tablesReferences: ['stg_orders'],
                    },
                    order_id: {
                        sql: '${TABLE}.order_id',
                        name: 'order_id',
                        type: DimensionType.NUMBER,
                        index: 0,
                        label: 'Order id',
                        table: 'stg_orders',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Stg orders',
                        compiledSql: '"stg_orders".order_id',
                        description: '',
                        tablesReferences: ['stg_orders'],
                    },
                    order_date: {
                        sql: '${TABLE}.order_date',
                        name: 'order_date',
                        type: DimensionType.DATE,
                        index: 3,
                        label: 'Order date',
                        table: 'stg_orders',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Stg orders',
                        compiledSql: '"stg_orders".order_date',
                        description: '',
                        tablesReferences: ['stg_orders'],
                    },
                    customer_id: {
                        sql: '${TABLE}.customer_id',
                        name: 'customer_id',
                        type: DimensionType.NUMBER,
                        index: 2,
                        label: 'Customer id',
                        table: 'stg_orders',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Stg orders',
                        compiledSql: '"stg_orders".customer_id',
                        description: '',
                        tablesReferences: ['stg_orders'],
                    },
                    order_date_DAY: {
                        sql: "DATE_TRUNC('DAY', ${TABLE}.order_date)",
                        name: 'order_date_day',
                        type: DimensionType.DATE,
                        group: 'order_date',
                        index: 3,
                        label: 'Order date day',
                        table: 'stg_orders',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Stg orders',
                        compiledSql:
                            'DATE_TRUNC(\'DAY\', "stg_orders".order_date)',
                        description: '',
                        timeInterval: TimeFrames.DAY,
                        tablesReferences: ['stg_orders'],
                    },
                    order_date_WEEK: {
                        sql: "DATE_TRUNC('WEEK', ${TABLE}.order_date)",
                        name: 'order_date_week',
                        type: DimensionType.DATE,
                        group: 'order_date',
                        index: 3,
                        label: 'Order date week',
                        table: 'stg_orders',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Stg orders',
                        compiledSql:
                            'DATE_TRUNC(\'WEEK\', "stg_orders".order_date)',
                        description: '',
                        timeInterval: TimeFrames.WEEK,
                        tablesReferences: ['stg_orders'],
                    },
                    order_date_YEAR: {
                        sql: "DATE_TRUNC('YEAR', ${TABLE}.order_date)",
                        name: 'order_date_year',
                        type: DimensionType.DATE,
                        group: 'order_date',
                        index: 3,
                        label: 'Order date year',
                        table: 'stg_orders',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Stg orders',
                        compiledSql:
                            'DATE_TRUNC(\'YEAR\', "stg_orders".order_date)',
                        description: '',
                        timeInterval: TimeFrames.YEAR,
                        tablesReferences: ['stg_orders'],
                    },
                    order_date_MONTH: {
                        sql: "DATE_TRUNC('MONTH', ${TABLE}.order_date)",
                        name: 'order_date_month',
                        type: DimensionType.DATE,
                        group: 'order_date',
                        index: 3,
                        label: 'Order date month',
                        table: 'stg_orders',
                        hidden: false,
                        fieldType: FieldType.DIMENSION,
                        tableLabel: 'Stg orders',
                        compiledSql:
                            'DATE_TRUNC(\'MONTH\', "stg_orders".order_date)',
                        description: '',
                        timeInterval: TimeFrames.MONTH,
                        tablesReferences: ['stg_orders'],
                    },
                },
                description: 'stg_orders table',
                lineageGraph: {
                    orders: [
                        { name: 'stg_orders', type: 'model' },
                        { name: 'stg_payments', type: 'model' },
                    ],
                    customers: [
                        { name: 'stg_customers', type: 'model' },
                        { name: 'stg_orders', type: 'model' },
                        { name: 'stg_payments', type: 'model' },
                    ],
                    stg_orders: [],
                },
                orderFieldsBy: OrderFieldsByStrategy.LABEL,
            },
        },
        baseTable: 'stg_orders',
        joinedTables: [],
        targetDatabase: SupportedDbtAdapter.POSTGRES,
    },
];
