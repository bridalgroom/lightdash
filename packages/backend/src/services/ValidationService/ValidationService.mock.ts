import { Ability } from '@casl/ability';
import {
    ChartType,
    DimensionType,
    Explore,
    FieldType,
    LightdashMode,
    MetricType,
    OrganizationMemberRole,
    SavedChart,
    SessionUser,
    ShareUrl,
    SupportedDbtAdapter,
} from '@lightdash/common';
import { LightdashConfig } from '../../config/parseConfig';

export const config = {
    mode: LightdashMode.DEFAULT,
    siteUrl: 'https://test.lightdash.cloud',
} as LightdashConfig;

export const chart: SavedChart = {
    uuid: 'fc4059cc-1d21-4b33-b21f-0c5370b55513',
    projectUuid: '3675b69e-8324-4110-bdca-059031aa8da3',
    name: 'How much revenue do we have per payment method?',
    description:
        'Total revenue received via coupons, gift cards, bank transfers, and credit cards',
    tableName: 'payments',
    updatedAt: new Date(),
    updatedByUser: {
        userUuid: 'b264d83a-9000-426a-85ec-3f9c20f368ce',
        firstName: 'David',
        lastName: 'Attenborough',
    },
    metricQuery: {
        dimensions: ['payments_payment_method'],
        metrics: [
            'payments_total_revenue',
            'payments_unique_payment_count',
            'payments_payment_id_max',
        ],
        filters: {},
        sorts: [
            {
                fieldId: 'payments_total_revenue',
                descending: false,
            },
        ],
        limit: 10,
        tableCalculations: [],
        additionalMetrics: [
            {
                table: 'payments',
                name: 'payment_id_max',
                type: MetricType.MAX,
                label: 'Max of Payment id',
                description: 'Max of Payment id on the table Payments',
                sql: '${TABLE}.payment_id',
            },
        ],
    },
    chartConfig: {
        type: ChartType.CARTESIAN,
        config: {
            layout: {
                xField: 'payments_payment_method',
                yField: [
                    'payments_total_revenue',
                    'payments_unique_payment_count',
                ],
                flipAxes: true,
            },
            eChartsConfig: {
                legend: {
                    show: true,
                    orient: 'horizontal',
                },
                series: [],
            },
        },
    },
    tableConfig: {
        columnOrder: [
            'payments_payment_method',
            'payments_total_revenue',
            'payments_unique_payment_count',
            'payments_payment_id_max',
        ],
    },
    organizationUuid: '172a2270-000f-42be-9c68-c4752c23ae51',
    spaceUuid: '84b6b431-cea5-4e75-8a1d-670777fe8c7d',
    spaceName: 'Jaffle shop',
    pinnedListUuid: null,
    pinnedListOrder: null,
    views: 31,
    firstViewedAt: '2023-05-03T08:22:06.353Z',
};

export const explore: Explore = {
    targetDatabase: SupportedDbtAdapter.POSTGRES,
    name: 'valid_explore',
    label: 'valid_explore',
    tags: [],
    baseTable: 'a',
    joinedTables: [],
    tables: {
        a: {
            name: 'a',
            label: 'a',
            database: 'database',
            schema: 'schema',
            sqlTable: 'test.table',
            dimensions: {
                myDimension: {
                    table: 'a',
                    tableLabel: 'a',
                    sql: 'sql',
                    name: 'myDimension',
                    label: 'myDimension',
                    fieldType: FieldType.DIMENSION,
                    type: DimensionType.STRING,
                    compiledSql: 'compiledSql',
                    tablesReferences: undefined,
                    hidden: false,
                },
            },
            metrics: {
                myMetric: {
                    table: 'a',
                    tableLabel: 'a',
                    sql: 'sql',
                    name: 'myMetric',
                    label: 'myMetric',
                    fieldType: FieldType.METRIC,
                    type: MetricType.NUMBER,
                    isAutoGenerated: false,
                    compiledSql: 'compiledSql',
                    tablesReferences: undefined,
                    hidden: false,
                },
            },
            lineageGraph: {},
        },
    },
};
