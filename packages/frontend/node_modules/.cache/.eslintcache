[{"/Users/oliverlaslett/code/seeker2/packages/frontend/src/index.tsx":"1","/Users/oliverlaslett/code/seeker2/packages/frontend/src/reportWebVitals.ts":"2","/Users/oliverlaslett/code/seeker2/packages/frontend/src/App.tsx":"3","/Users/oliverlaslett/code/seeker2/packages/frontend/src/dbt.tsx":"4"},{"size":500,"mtime":1616106252615,"results":"5","hashOfConfig":"6"},{"size":425,"mtime":1616106252619,"results":"7","hashOfConfig":"6"},{"size":10821,"mtime":1616148599871,"results":"8","hashOfConfig":"6"},{"size":4285,"mtime":1616106252617,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"122fsu0",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"/Users/oliverlaslett/code/seeker2/packages/frontend/src/index.tsx",[],["20","21"],"/Users/oliverlaslett/code/seeker2/packages/frontend/src/reportWebVitals.ts",[],"/Users/oliverlaslett/code/seeker2/packages/frontend/src/App.tsx",["22","23","24","25"],"import React, {Component, useEffect, useState} from 'react';\nimport {Alignment, Button, Classes, Colors, Icon, Intent, ITreeNode, Navbar, Tree} from '@blueprintjs/core';\nimport {Tooltip2} from \"@blueprintjs/popover2\";\nimport {Cell, Column, Table, TableLoadingOption} from '@blueprintjs/table';\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/table/lib/css/table.css\";\nimport \"@blueprintjs/popover2/lib/css/blueprint-popover2.css\";\nimport {SeekerDimension, SeekerMeasure, SeekerView, SeekerViewColumn} from \"./seekerTypes\";\nimport {loadModelNodes, translateDbtModelToSeekerView} from \"./dbt\";\n\nconst measureTypes: { [key: string]: (sql: string) => string} = {\n    'max': (sql: string) => `MAX( ${sql} )`,\n    'count distinct': (sql: string) => `COUNT( DISTINCT ${sql} )` ,\n}\n\ntype GeneratedSqlProps = {\n    dimensions?: SeekerDimension[]\n    measures?: SeekerMeasure[]\n}\n\nconst hexToRGB = (hex: string, alpha: number) => {\n    const h = parseInt('0x' + hex.substring(1))\n    const r = h >> 16 & 0xFF\n    const g = h >> 8 & 0xFF\n    const b = h & 0xFF\n    return `rgb(${r}, ${g}, ${b}, ${alpha})`\n}\n\nconst niceSqlName = (sql: string): string => sql.toLowerCase().split(' ').join('_')\n\nconst generateSql = ({ dimensions = [], measures = [] }: GeneratedSqlProps) => {\n    const allTableSql = [...dimensions, ...measures].map(\n        (col: SeekerViewColumn) => `\\`${col.database}.${col.schema}.${col.tableName}\\` AS ${col.tableName}`\n    )\n    const tableSql = allTableSql.filter((val, idx, arr) => arr.indexOf(val) === idx);\n    const dimensionSql = dimensions.map(d => `${d.tableName}.${d.sql} AS \\`${niceSqlName(d.name)}\\``)\n    const groupsSql = (dimensions?.length > 0) && (measures?.length > 0) ? 'GROUP BY ' + dimensions.map((dim, idx) => `${idx + 1}`).join(', ') : ''\n    const measureSql = measures.map(m => `${measureTypes[m.type](m.tableName + '.' + m.sql)} AS \\`${niceSqlName(m.name)}\\``)\n    return `SELECT\n  ${[...dimensionSql, measureSql].join(',\\n  ')}\nFROM ${tableSql.join('\\nLEFT JOIN  ')}\n${groupsSql}\n`\n}\n\n\nconst views: { [id: string]: SeekerView} = Object.fromEntries(loadModelNodes()\n    .map(translateDbtModelToSeekerView)\n    .map(view => [view.id, view]))\n\nconst dimensions = Object.assign({}, ...Object.values(views).map(view => view.dimensions))\nconst measures = Object.assign({}, ...Object.values(views).map(view => view.measures))\n\nfunction App() {\n    const [activeColumnIds, setActiveColumnIds] = useState<{[key: string]: boolean}>({})\n    const [activeDimensions, setActiveDimensions] = useState<SeekerDimension[]>([])\n    const [activeMeasures, setActiveMeasures] = useState<SeekerMeasure[]>([])\n    const [isTableLoading, setIsTableLoading] = useState(false);\n    const [tableData, setTableData] = useState<{[column: string]: string}[]>([]);\n\n    const onSideTreeSelect = (dimensionId: string) => {\n        setActiveColumnIds(ad => ({\n            ...ad,\n            [dimensionId]: !(ad[dimensionId] || false),\n        }))\n    }\n\n    useEffect( () => {\n        const ids = Object.keys(activeColumnIds).filter(id => activeColumnIds[id] || false)\n        setActiveDimensions(ids.map(id => dimensions[id]).filter(Boolean))\n        setActiveMeasures(ids.map(id => measures[id]).filter(Boolean))\n    }, [activeColumnIds])\n\n    const cellRender = (rowIndex: number, colIndex: number) => {\n        const isDimension = colIndex < activeDimensions.length;\n        const isEven = (rowIndex % 2) === 0\n        const color = isDimension\n            ? (isEven ? hexToRGB(Colors.BLUE3, 0.1) : hexToRGB(Colors.BLUE3, 0.2))\n            : (isEven ? hexToRGB(Colors.ORANGE3, 0.1) : hexToRGB(Colors.ORANGE3, 0.2))\n        const value = Object.values(tableData[rowIndex])[colIndex];\n        return <Cell style={{backgroundColor: color}}>{value}</Cell>\n    }\n\n    const runSql = () => {\n        setIsTableLoading(true);\n        fetch('/query', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n                projectId: 'alpine-land-278512',\n                query: generateSql({dimensions: activeDimensions, measures: activeMeasures}),\n            })\n        })\n            .then(r => r.json())\n            .then(rows => {\n                console.log(rows)\n                setTableData(rows);\n                setIsTableLoading(false);\n            })\n    };\n\n    return (\n        <div style={{\n            height: \"100vh\",\n        }}>\n            <Navbar className=\"bp3-dark\">\n                <Navbar.Group align={Alignment.LEFT}>\n                    <Navbar.Heading>Seeker</Navbar.Heading>\n              </Navbar.Group>\n          </Navbar>\n          <div style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              flexWrap: \"nowrap\",\n              justifyContent: \"flex-start\",\n              alignItems: \"stretch\",\n              height: \"100%\",\n          }}>\n              <div style={{\n                  backgroundColor: Colors.LIGHT_GRAY4,\n                  flexGrow: 1,\n              }}>\n                  <SideTree\n                    onNodeSelect={onSideTreeSelect}\n                    selectedNodes={activeColumnIds}\n                  />\n              </div>\n              <div style={{\n                  flexGrow: 4,\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  justifyContent: \"flex-start\",\n              }}>\n                  <div style={{height: 400}}>\n                      <Table numRows={tableData.length} loadingOptions={isTableLoading ? [TableLoadingOption.CELLS, TableLoadingOption.ROW_HEADERS] : []}>\n                          {\n                              [\n                                  ...Object.values(views).flatMap(view => Object.values(view.dimensions).map(dimension => ({...dimension, viewName: view.name}))),\n                                  ...Object.values(views).flatMap(view => Object.values(view.measures).map(measure => ({...measure, viewName: view.name}))),\n                              ]\n                                  .filter(col => activeColumnIds[col.id])\n                                  .map(col => (\n                                          <Column\n                                              name={`${col.viewName} ${col.name}`}\n                                              key={col.id}\n                                              cellRenderer={cellRender}\n                                          />\n                                      )\n                                  )\n                          }\n                      </Table>\n                  </div>\n                  <p>\n                      <pre className=\"bp3-code-block\"><code>{ generateSql({dimensions: activeDimensions, measures: activeMeasures}) }</code></pre>\n                  </p>\n                  <Button intent={\"primary\"} style={{width: 200}} onClick={runSql}>\n                      Run\n                  </Button>\n              </div>\n          </div>\n      </div>\n  );\n}\n\ntype SideTreeProps = {\n    selectedNodes: { [key: string]: boolean},\n    onNodeSelect: ((id: string) => void);\n};\ntype SideTreeState = {\n    expandedNodes: { [key: string]: boolean},\n};\nclass SideTree extends Component<SideTreeProps, SideTreeState> {\n\n    constructor(props: SideTreeProps) {\n        super(props);\n        this.handleNodeCollapse = this.handleNodeCollapse.bind(this);\n        this.handleNodeExpand = this.handleNodeExpand.bind(this);\n        this.handleOnNodeClick = this.handleOnNodeClick.bind(this);\n        this.state = {\n            expandedNodes: {},\n        };\n    }\n\n    render() {\n        const contents = Object.values(views).map( view => ({\n            key: view.id,\n            id: view.id,\n            label: view.name,\n            isExpanded: this.state.expandedNodes[view.id] || false,\n            childNodes: [\n                {\n                    key: \"dimensions\",\n                    id: \"dimensions\",\n                    label: (<span style={{color: Colors.BLUE1}}><strong>Dimensions</strong></span>),\n                    icon: (\n                        <Icon icon=\"tag\" intent={Intent.PRIMARY} className={Classes.TREE_NODE_ICON} />\n                    ),\n                    hasCaret: false,\n                    isExpanded: true,\n                    childNodes: Object.values(view.dimensions).map( dimension => ({\n                        key: dimension.id,\n                        id: dimension.id,\n                        label: dimension.name,\n                        isSelected: this.props.selectedNodes[dimension.id],\n                        secondaryLabel: dimension.description ? (\n                            <Tooltip2 content={dimension.description}>\n                                <Icon icon=\"eye-open\" />\n                            </Tooltip2>\n                        ) : null\n                    }))\n                },\n                {\n                    key: \"measures\",\n                    id: \"measures\",\n                    label: (<span style={{color: Colors.ORANGE1}}><strong>Measures</strong></span>),\n                    icon: (\n                        <Icon icon=\"numerical\" intent={Intent.WARNING} className={Classes.TREE_NODE_ICON} />\n                    ),\n                    isExpanded: true,\n                    hasCaret: false,\n                    childNodes: Object.values(view.measures).map( measure => ({\n                        key: measure.id,\n                        id: measure.id,\n                        label: measure.name,\n                        isSelected: this.props.selectedNodes[measure.id],\n                        secondaryLabel: measure.description ? (\n                            <Tooltip2 content={measure.description}>\n                                <Icon icon=\"eye-open\" />\n                            </Tooltip2>\n                        ) : null\n                    }))\n                },\n            ]\n        }))\n        return (\n            <Tree\n                contents={contents}\n                onNodeCollapse={this.handleNodeCollapse}\n                onNodeExpand={this.handleNodeExpand}\n                onNodeClick={this.handleOnNodeClick}\n                className={Classes.ELEVATION_0}\n                />\n        )\n    };\n\n    handleNodeCollapse = (nodeData: ITreeNode) => {\n        this.setState(state => ({\n            expandedNodes: {...state.expandedNodes, [nodeData.id]: false},\n        }))\n    };\n\n    handleNodeExpand = (nodeData: ITreeNode) => {\n        this.setState(state => ({\n            expandedNodes: {...state.expandedNodes, [nodeData.id]: true},\n        }))\n    };\n\n    handleOnNodeClick = (nodeData: ITreeNode, _nodePath: number[]) => {\n        if (_nodePath.length !== 1) {\n            this.props.onNodeSelect(`${nodeData.id}`)\n        };\n    }\n\n}\n\n\nexport default App;\n","/Users/oliverlaslett/code/seeker2/packages/frontend/src/dbt.tsx",[],{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":23,"column":17,"nodeType":"32","messageId":"33","endLine":23,"endColumn":19},{"ruleId":"30","severity":1,"message":"31","line":23,"column":23,"nodeType":"32","messageId":"33","endLine":23,"endColumn":24},{"ruleId":"30","severity":1,"message":"31","line":24,"column":17,"nodeType":"32","messageId":"33","endLine":24,"endColumn":19},{"ruleId":"30","severity":1,"message":"31","line":24,"column":22,"nodeType":"32","messageId":"33","endLine":24,"endColumn":23},"no-native-reassign",["34"],"no-negated-in-lhs",["35"],"no-mixed-operators","Unexpected mix of '>>' and '&'.","BinaryExpression","unexpectedMixedOperator","no-global-assign","no-unsafe-negation"]