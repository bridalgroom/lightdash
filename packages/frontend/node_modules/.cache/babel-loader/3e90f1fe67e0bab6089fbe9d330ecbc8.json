{"ast":null,"code":"import rawManifest from \"./manifest.json\";\nexport const loadModelNodes = () => {\n  return Object.values(rawManifest.nodes).filter(node => node.resource_type === \"model\");\n};\n\nconst translateDbtModelMeasure = (model, measure) => ({\n  database: model.database,\n  schema: model.schema,\n  tableName: model.name,\n  id: `${model.unique_id}.${measure.name}`,\n  name: measure.name,\n  description: measure.description || \"\",\n  sql: measure.sql,\n  type: measure.type\n});\n\nconst translateDbtModelDimension = (model, dimension) => ({\n  id: `${model.unique_id}.${dimension.name}`,\n  database: model.database,\n  schema: model.schema,\n  tableName: model.name,\n  name: dimension.name,\n  description: dimension.description || \"\",\n  sql: dimension.sql\n});\n\nconst translateDbtColumnMeasure = (model, column, measure) => ({\n  id: `${model.unique_id}.${measure.name}`,\n  database: model.database,\n  schema: model.schema,\n  tableName: model.name,\n  name: measure.name,\n  sql: column.name,\n  type: measure.type,\n  description: column.description || \"\"\n});\n\nconst translateDbtColumnDimension = (model, column, dimension) => ({\n  id: `${model.unique_id}.${dimension.name}`,\n  database: model.database,\n  schema: model.schema,\n  tableName: model.name,\n  name: dimension.name,\n  description: column.description || \"\",\n  sql: column.name\n});\n\nexport const translateDbtModelToSeekerView = model => {\n  var _model$meta$seekerIo, _model$meta$seekerIo2, _model$meta$seekerIo3;\n\n  const modelDimensions = (((_model$meta$seekerIo = model.meta[\"seeker.io\"]) === null || _model$meta$seekerIo === void 0 ? void 0 : _model$meta$seekerIo.dimensions) || []).map(dim => translateDbtModelDimension(model, dim)).map(dim => [dim.id, dim]);\n  const columnDimensions = Object.values(model.columns).flatMap(column => {\n    var _column$meta$seekerI;\n\n    return (((_column$meta$seekerI = column.meta[\"seeker.io\"]) === null || _column$meta$seekerI === void 0 ? void 0 : _column$meta$seekerI.dimensions) || []).map(dim => translateDbtColumnDimension(model, column, dim)).map(dim => [dim.id, dim]);\n  });\n  const dimensions = { ...Object.fromEntries(modelDimensions),\n    ...Object.fromEntries(columnDimensions)\n  };\n  const modelMeasures = (((_model$meta$seekerIo2 = model.meta[\"seeker.io\"]) === null || _model$meta$seekerIo2 === void 0 ? void 0 : _model$meta$seekerIo2.measures) || []).map(measure => translateDbtModelMeasure(model, measure)).map(measure => [measure.id, measure]);\n  const columnMeasures = Object.values(model.columns).flatMap(column => {\n    var _column$meta$seekerI2;\n\n    return (((_column$meta$seekerI2 = column.meta[\"seeker.io\"]) === null || _column$meta$seekerI2 === void 0 ? void 0 : _column$meta$seekerI2.measures) || []).map(measure => translateDbtColumnMeasure(model, column, measure)).map(measure => [measure.id, measure]);\n  });\n  const measures = { ...Object.fromEntries(modelMeasures),\n    ...Object.fromEntries(columnMeasures)\n  };\n  return {\n    id: model.unique_id,\n    database: model.database,\n    schema: model.schema,\n    tableName: model.name,\n    name: ((_model$meta$seekerIo3 = model.meta[\"seeker.io\"]) === null || _model$meta$seekerIo3 === void 0 ? void 0 : _model$meta$seekerIo3.name) || model.name,\n    dimensions: dimensions,\n    measures: measures\n  };\n};","map":{"version":3,"sources":["/Users/oliverlaslett/code/seeker2/packages/frontend/src/dbt.tsx"],"names":["rawManifest","loadModelNodes","Object","values","nodes","filter","node","resource_type","translateDbtModelMeasure","model","measure","database","schema","tableName","name","id","unique_id","description","sql","type","translateDbtModelDimension","dimension","translateDbtColumnMeasure","column","translateDbtColumnDimension","translateDbtModelToSeekerView","modelDimensions","meta","dimensions","map","dim","columnDimensions","columns","flatMap","fromEntries","modelMeasures","measures","columnMeasures"],"mappings":"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","sourcesContent":["import {SeekerDimension, SeekerMeasure, SeekerView} from \"./seekerTypes\";\nimport rawManifest from \"./manifest.json\";\n\ntype DbtNode = {\n    unique_id: string\n    resource_type: string,\n}\ntype DbtModelNode = DbtNode & {\n    columns: { [name: string]: DbtModelColumn },\n    meta: DbtModelMetadata,\n    database: string,\n    schema: string,\n    name: string,\n}\ntype DbtModelMetadata = {\n    \"seeker.io\"?: DbtModelSeekerConfig\n}\ntype DbtModelSeekerConfig = {\n    name?: string,\n    dimensions: DbtModelSeekerDimensionConfig[],\n    measures: DbtModelSeekerMeasureConfig[]\n}\ntype DbtModelSeekerDimensionConfig = {\n    name: string,\n    description?: string,\n    sql: string,\n}\ntype DbtModelSeekerMeasureConfig = {\n    name: string,\n    description?: string,\n    type: string,\n    sql: string,\n}\ntype DbtModelColumn = {\n    name: string,\n    description?: string,\n    meta: DbtColumnMetadata\n}\ntype DbtColumnMetadata = {\n    \"seeker.io\"?: DbtColumnSeekerConfig,\n}\ntype DbtColumnSeekerConfig = {\n    dimensions: DbtColumnSeekerDimensionConfig[],\n    measures: DbtColumnSeekerMeasureConfig[],\n}\ntype DbtColumnSeekerDimensionConfig = {\n    name: string\n}\ntype DbtColumnSeekerMeasureConfig = {\n    name: string,\n    type: string,\n}\nexport const loadModelNodes = (): DbtModelNode[] => {\n    return Object.values(rawManifest.nodes).filter(node => node.resource_type === \"model\") as DbtModelNode[]\n}\nconst translateDbtModelMeasure = (model: DbtModelNode, measure: DbtModelSeekerMeasureConfig): SeekerMeasure => ({\n    database: model.database,\n    schema: model.schema,\n    tableName: model.name,\n    id: `${model.unique_id}.${measure.name}`,\n    name: measure.name,\n    description: measure.description || \"\",\n    sql: measure.sql,\n    type: measure.type,\n})\nconst translateDbtModelDimension = (model: DbtModelNode, dimension: DbtModelSeekerDimensionConfig): SeekerDimension => ({\n    id: `${model.unique_id}.${dimension.name}`,\n    database: model.database,\n    schema: model.schema,\n    tableName: model.name,\n    name: dimension.name,\n    description: dimension.description || \"\",\n    sql: dimension.sql,\n})\nconst translateDbtColumnMeasure = (model: DbtModelNode, column: DbtModelColumn, measure: DbtColumnSeekerMeasureConfig): SeekerMeasure => ({\n    id: `${model.unique_id}.${measure.name}`,\n    database: model.database,\n    schema: model.schema,\n    tableName: model.name,\n    name: measure.name,\n    sql: column.name,\n    type: measure.type,\n    description: column.description || \"\",\n})\nconst translateDbtColumnDimension = (model: DbtModelNode, column: DbtModelColumn, dimension: DbtColumnSeekerDimensionConfig): SeekerDimension => ({\n    id: `${model.unique_id}.${dimension.name}`,\n    database: model.database,\n    schema: model.schema,\n    tableName: model.name,\n    name: dimension.name,\n    description: column.description || \"\",\n    sql: column.name,\n})\n\nexport const translateDbtModelToSeekerView = (model: DbtModelNode): SeekerView => {\n    const modelDimensions = (model.meta[\"seeker.io\"]?.dimensions || [])\n        .map(dim => translateDbtModelDimension(model, dim))\n        .map(dim => [dim.id, dim])\n    const columnDimensions = Object.values(model.columns).flatMap(\n        column => (column.meta[\"seeker.io\"]?.dimensions || []).map(\n            dim => translateDbtColumnDimension(model, column, dim)\n        )\n            .map(dim => [dim.id, dim])\n    )\n    const dimensions = {...Object.fromEntries(modelDimensions), ...Object.fromEntries(columnDimensions)}\n\n    const modelMeasures = (model.meta[\"seeker.io\"]?.measures || [])\n        .map(measure => translateDbtModelMeasure(model, measure))\n        .map(measure => [measure.id, measure])\n    const columnMeasures = Object.values(model.columns).flatMap(\n        column => (column.meta[\"seeker.io\"]?.measures || []).map(\n            measure => translateDbtColumnMeasure(model, column, measure)\n        )\n            .map(measure => [measure.id, measure])\n    )\n    const measures = {...Object.fromEntries(modelMeasures), ...Object.fromEntries(columnMeasures)}\n\n    return {\n        id: model.unique_id,\n        database: model.database,\n        schema: model.schema,\n        tableName: model.name,\n        name: model.meta[\"seeker.io\"]?.name || model.name,\n        dimensions: dimensions,\n        measures: measures,\n    }\n}"]},"metadata":{},"sourceType":"module"}