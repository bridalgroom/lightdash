{"ast":null,"code":"var _jsxFileName = \"/Users/oliverlaslett/code/seeker2/packages/frontend/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport { Classes, Intent, Alignment, Button, Colors, Icon, Navbar, Tree } from '@blueprintjs/core';\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport { Column, Table, Cell } from '@blueprintjs/table';\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/table/lib/css/table.css\";\nimport \"@blueprintjs/popover2/lib/css/blueprint-popover2.css\";\nimport { loadModelNodes, translateDbtModelToSeekerView } from \"./dbt\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst measureTypes = {\n  'max': sql => `MAX( ${sql} )`,\n  'count distinct': sql => `COUNT( DISTINCT ${sql} )`\n};\n\nconst hexToRGB = (hex, alpha) => {\n  const h = parseInt('0x' + hex.substring(1));\n  const r = h >> 16 & 0xFF;\n  const g = h >> 8 & 0xFF;\n  const b = h & 0xFF;\n  return `rgb(${r}, ${g}, ${b}, ${alpha})`;\n};\n\nconst niceSqlName = sql => sql.toLowerCase().split(' ').join('_');\n\nconst generateSql = ({\n  dimensions = [],\n  measures = []\n}) => {\n  const allTableSql = [...dimensions, ...measures].map(col => `\\`${col.database}.${col.schema}.${col.tableName}\\` AS ${col.tableName}`);\n  const tableSql = allTableSql.filter((val, idx, arr) => arr.indexOf(val) === idx);\n  const dimensionSql = dimensions.map(d => `${d.tableName}.${d.sql} AS ${d.tableName}.${niceSqlName(d.name)}`);\n  const groupsSql = (dimensions === null || dimensions === void 0 ? void 0 : dimensions.length) > 0 && (measures === null || measures === void 0 ? void 0 : measures.length) > 0 ? 'GROUP BY ' + dimensions.map((dim, idx) => `${idx + 1}`).join(', ') : '';\n  const measureSql = measures.map(m => `${measureTypes[m.type](m.tableName + '.' + m.sql)} AS ${m.tableName}.${niceSqlName(m.name)}`);\n  return `SELECT\n  ${[...dimensionSql, measureSql].join(',\\n  ')}\nFROM ${tableSql.join('\\nLEFT JOIN  ')}\n${groupsSql}\n`;\n};\n\nconst views = Object.fromEntries(loadModelNodes().map(translateDbtModelToSeekerView).map(view => [view.id, view]));\nconst dimensions = Object.assign({}, ...Object.values(views).map(view => view.dimensions));\nconst measures = Object.assign({}, ...Object.values(views).map(view => view.measures));\n\nfunction App() {\n  _s();\n\n  const [activeColumnIds, setActiveColumnIds] = useState({});\n  const [activeDimensions, setActiveDimensions] = useState([]);\n  const [activeMeasures, setActiveMeasures] = useState([]);\n\n  const onSideTreeSelect = dimensionId => {\n    setActiveColumnIds(ad => ({ ...ad,\n      [dimensionId]: !(ad[dimensionId] || false)\n    }));\n  };\n\n  useEffect(() => {\n    const ids = Object.keys(activeColumnIds).filter(id => activeColumnIds[id] || false);\n    setActiveDimensions(ids.map(id => dimensions[id]).filter(Boolean));\n    setActiveMeasures(ids.map(id => measures[id]).filter(Boolean));\n  }, [activeColumnIds]);\n\n  const cellRender = (rowIndex, colIndex) => {\n    const isDimension = colIndex < activeDimensions.length;\n    const isEven = rowIndex % 2 === 0;\n    const color = isDimension ? isEven ? hexToRGB(Colors.BLUE3, 0.1) : hexToRGB(Colors.BLUE3, 0.2) : isEven ? hexToRGB(Colors.ORANGE3, 0.1) : hexToRGB(Colors.ORANGE3, 0.2);\n    return /*#__PURE__*/_jsxDEV(Cell, {\n      style: {\n        backgroundColor: color\n      },\n      children: \"Test \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 16\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      className: \"bp3-dark\",\n      children: /*#__PURE__*/_jsxDEV(Navbar.Group, {\n        align: Alignment.LEFT,\n        children: /*#__PURE__*/_jsxDEV(Navbar.Heading, {\n          children: \"Seeker\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        flexWrap: \"nowrap\",\n        justifyContent: \"flex-start\",\n        alignItems: \"stretch\",\n        height: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundColor: Colors.LIGHT_GRAY4,\n          flexGrow: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(SideTree, {\n          onNodeSelect: onSideTreeSelect,\n          selectedNodes: activeColumnIds\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flexGrow: 4,\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"flex-start\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: 400\n          },\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            numRows: 10,\n            children: [...Object.values(views).flatMap(view => Object.values(view.dimensions).map(dimension => ({ ...dimension,\n              viewName: view.name\n            }))), ...Object.values(views).flatMap(view => Object.values(view.measures).map(measure => ({ ...measure,\n              viewName: view.name\n            })))].filter(col => activeColumnIds[col.id]).map(col => /*#__PURE__*/_jsxDEV(Column, {\n              name: `${col.viewName} ${col.name}`,\n              cellRenderer: cellRender\n            }, col.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 43\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"pre\", {\n            className: \"bp3-code-block\",\n            children: /*#__PURE__*/_jsxDEV(\"code\", {\n              children: generateSql({\n                dimensions: activeDimensions,\n                measures: activeMeasures\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 55\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          intent: \"primary\",\n          style: {\n            width: 200\n          },\n          children: \"Run\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"vbLriMhPqzJ+cZ5VNGriJkWSMYg=\");\n\n_c = App;\n\nclass SideTree extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleNodeCollapse = nodeData => {\n      this.setState(state => ({\n        expandedNodes: { ...state.expandedNodes,\n          [nodeData.id]: false\n        }\n      }));\n    };\n\n    this.handleNodeExpand = nodeData => {\n      this.setState(state => ({\n        expandedNodes: { ...state.expandedNodes,\n          [nodeData.id]: true\n        }\n      }));\n    };\n\n    this.handleOnNodeClick = (nodeData, _nodePath) => {\n      if (_nodePath.length !== 1) {\n        this.props.onNodeSelect(`${nodeData.id}`);\n      }\n\n      ;\n    };\n\n    this.handleNodeCollapse = this.handleNodeCollapse.bind(this);\n    this.handleNodeExpand = this.handleNodeExpand.bind(this);\n    this.handleOnNodeClick = this.handleOnNodeClick.bind(this);\n    this.state = {\n      expandedNodes: {}\n    };\n  }\n\n  render() {\n    const contents = Object.values(views).map(view => ({\n      key: view.id,\n      id: view.id,\n      label: view.name,\n      isExpanded: this.state.expandedNodes[view.id] || false,\n      childNodes: [{\n        key: \"dimensions\",\n        id: \"dimensions\",\n        label: /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: Colors.BLUE1\n          },\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Dimensions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 65\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 29\n        }, this),\n        icon: /*#__PURE__*/_jsxDEV(Icon, {\n          icon: \"tag\",\n          intent: Intent.PRIMARY,\n          className: Classes.TREE_NODE_ICON\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 25\n        }, this),\n        hasCaret: false,\n        isExpanded: true,\n        childNodes: Object.values(view.dimensions).map(dimension => ({\n          key: dimension.id,\n          id: dimension.id,\n          label: dimension.name,\n          isSelected: this.props.selectedNodes[dimension.id],\n          secondaryLabel: dimension.description ? /*#__PURE__*/_jsxDEV(Tooltip2, {\n            content: dimension.description,\n            children: /*#__PURE__*/_jsxDEV(Icon, {\n              icon: \"eye-open\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 29\n          }, this) : null\n        }))\n      }, {\n        key: \"measures\",\n        id: \"measures\",\n        label: /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: Colors.ORANGE1\n          },\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Measures\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 67\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 29\n        }, this),\n        icon: /*#__PURE__*/_jsxDEV(Icon, {\n          icon: \"numerical\",\n          intent: Intent.WARNING,\n          className: Classes.TREE_NODE_ICON\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 25\n        }, this),\n        isExpanded: true,\n        hasCaret: false,\n        childNodes: Object.values(view.measures).map(measure => ({\n          key: measure.id,\n          id: measure.id,\n          label: measure.name,\n          isSelected: this.props.selectedNodes[measure.id],\n          secondaryLabel: measure.description ? /*#__PURE__*/_jsxDEV(Tooltip2, {\n            content: measure.description,\n            children: /*#__PURE__*/_jsxDEV(Icon, {\n              icon: \"eye-open\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 29\n          }, this) : null\n        }))\n      }]\n    }));\n    return /*#__PURE__*/_jsxDEV(Tree, {\n      contents: contents,\n      onNodeCollapse: this.handleNodeCollapse,\n      onNodeExpand: this.handleNodeExpand,\n      onNodeClick: this.handleOnNodeClick,\n      className: Classes.ELEVATION_0\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/oliverlaslett/code/seeker2/packages/frontend/src/App.tsx"],"names":["React","Component","useEffect","useState","Classes","Intent","Alignment","Button","Colors","Icon","Navbar","Tree","Tooltip2","Column","Table","Cell","loadModelNodes","translateDbtModelToSeekerView","measureTypes","sql","hexToRGB","hex","alpha","h","parseInt","substring","r","g","b","niceSqlName","toLowerCase","split","join","generateSql","dimensions","measures","allTableSql","map","col","database","schema","tableName","tableSql","filter","val","idx","arr","indexOf","dimensionSql","d","name","groupsSql","length","dim","measureSql","m","type","views","Object","fromEntries","view","id","assign","values","App","activeColumnIds","setActiveColumnIds","activeDimensions","setActiveDimensions","activeMeasures","setActiveMeasures","onSideTreeSelect","dimensionId","ad","ids","keys","Boolean","cellRender","rowIndex","colIndex","isDimension","isEven","color","BLUE3","ORANGE3","backgroundColor","height","LEFT","display","flexDirection","flexWrap","justifyContent","alignItems","LIGHT_GRAY4","flexGrow","flatMap","dimension","viewName","measure","width","SideTree","constructor","props","handleNodeCollapse","nodeData","setState","state","expandedNodes","handleNodeExpand","handleOnNodeClick","_nodePath","onNodeSelect","bind","render","contents","key","label","isExpanded","childNodes","BLUE1","icon","PRIMARY","TREE_NODE_ICON","hasCaret","isSelected","selectedNodes","secondaryLabel","description","ORANGE1","WARNING","ELEVATION_0"],"mappings":"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","sourcesContent":["import React, {Component, useEffect, useState} from 'react';\nimport {Classes, Intent, Alignment, Button, Colors, Icon, ITreeNode, Navbar, Tree} from '@blueprintjs/core';\nimport {Tooltip2} from \"@blueprintjs/popover2\";\nimport {Column, Table, Cell} from '@blueprintjs/table';\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/table/lib/css/table.css\";\nimport \"@blueprintjs/popover2/lib/css/blueprint-popover2.css\";\nimport {SeekerDimension, SeekerMeasure, SeekerView, SeekerViewColumn} from \"./seekerTypes\";\nimport {loadModelNodes, translateDbtModelToSeekerView} from \"./dbt\";\n\nconst measureTypes: { [key: string]: (sql: string) => string} = {\n    'max': (sql: string) => `MAX( ${sql} )`,\n    'count distinct': (sql: string) => `COUNT( DISTINCT ${sql} )` ,\n}\n\ntype GeneratedSqlProps = {\n    dimensions?: SeekerDimension[]\n    measures?: SeekerMeasure[]\n}\n\nconst hexToRGB = (hex: string, alpha: number) => {\n    const h = parseInt('0x' + hex.substring(1))\n    const r = h >> 16 & 0xFF\n    const g = h >> 8 & 0xFF\n    const b = h & 0xFF\n    return `rgb(${r}, ${g}, ${b}, ${alpha})`\n}\n\nconst niceSqlName = (sql: string): string => sql.toLowerCase().split(' ').join('_')\n\nconst generateSql = ({ dimensions = [], measures = [] }: GeneratedSqlProps) => {\n    const allTableSql = [...dimensions, ...measures].map(\n        (col: SeekerViewColumn) => `\\`${col.database}.${col.schema}.${col.tableName}\\` AS ${col.tableName}`\n    )\n    const tableSql = allTableSql.filter((val, idx, arr) => arr.indexOf(val) === idx);\n    const dimensionSql = dimensions.map(d => `${d.tableName}.${d.sql} AS ${d.tableName}.${niceSqlName(d.name)}`)\n    const groupsSql = (dimensions?.length > 0) && (measures?.length > 0) ? 'GROUP BY ' + dimensions.map((dim, idx) => `${idx+1}`).join(', ') : ''\n    const measureSql = measures.map(m => `${measureTypes[m.type](m.tableName + '.' + m.sql)} AS ${m.tableName}.${niceSqlName(m.name)}`)\n    return `SELECT\n  ${[...dimensionSql, measureSql].join(',\\n  ')}\nFROM ${tableSql.join('\\nLEFT JOIN  ')}\n${groupsSql}\n`\n}\n\n\nconst views: { [id: string]: SeekerView} = Object.fromEntries(loadModelNodes()\n    .map(translateDbtModelToSeekerView)\n    .map(view => [view.id, view]))\n\nconst dimensions = Object.assign({}, ...Object.values(views).map(view => view.dimensions))\nconst measures = Object.assign({}, ...Object.values(views).map(view => view.measures))\n\nfunction App() {\n    const [activeColumnIds, setActiveColumnIds] = useState<{[key: string]: boolean}>({})\n    const [activeDimensions, setActiveDimensions] = useState<SeekerDimension[]>([])\n    const [activeMeasures, setActiveMeasures] = useState<SeekerMeasure[]>([])\n\n    const onSideTreeSelect = (dimensionId: string) => {\n        setActiveColumnIds(ad => ({\n            ...ad,\n            [dimensionId]: !(ad[dimensionId] || false),\n        }))\n    }\n\n    useEffect( () => {\n        const ids = Object.keys(activeColumnIds).filter(id => activeColumnIds[id] || false)\n        setActiveDimensions(ids.map(id => dimensions[id]).filter(Boolean))\n        setActiveMeasures(ids.map(id => measures[id]).filter(Boolean))\n    }, [activeColumnIds])\n\n    const cellRender = (rowIndex: number, colIndex: number) => {\n        const isDimension = colIndex < activeDimensions.length;\n        const isEven = (rowIndex % 2) === 0\n        const color = isDimension\n            ? (isEven ? hexToRGB(Colors.BLUE3, 0.1) : hexToRGB(Colors.BLUE3, 0.2))\n            : (isEven ? hexToRGB(Colors.ORANGE3, 0.1) : hexToRGB(Colors.ORANGE3, 0.2))\n        return <Cell style={{backgroundColor: color}}>Test </Cell>\n    }\n\n    return (\n        <div style={{\n            height: \"100vh\",\n        }}>\n            <Navbar className=\"bp3-dark\">\n                <Navbar.Group align={Alignment.LEFT}>\n                    <Navbar.Heading>Seeker</Navbar.Heading>\n              </Navbar.Group>\n          </Navbar>\n          <div style={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              flexWrap: \"nowrap\",\n              justifyContent: \"flex-start\",\n              alignItems: \"stretch\",\n              height: \"100%\",\n          }}>\n              <div style={{\n                  backgroundColor: Colors.LIGHT_GRAY4,\n                  flexGrow: 1,\n              }}>\n                  <SideTree\n                    onNodeSelect={onSideTreeSelect}\n                    selectedNodes={activeColumnIds}\n                  />\n              </div>\n              <div style={{\n                  flexGrow: 4,\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  justifyContent: \"flex-start\",\n              }}>\n                  <div style={{height: 400}}>\n                      <Table numRows={10}>\n                          {\n                              [\n                                  ...Object.values(views).flatMap(view => Object.values(view.dimensions).map(dimension => ({...dimension, viewName: view.name}))),\n                                  ...Object.values(views).flatMap(view => Object.values(view.measures).map(measure => ({...measure, viewName: view.name}))),\n                              ]\n                                  .filter(col => activeColumnIds[col.id])\n                                  .map(col => (\n                                          <Column\n                                              name={`${col.viewName} ${col.name}`}\n                                              key={col.id}\n                                              cellRenderer={cellRender}\n                                          />\n                                      )\n                                  )\n                          }\n                      </Table>\n                  </div>\n                  <p>\n                      <pre className=\"bp3-code-block\"><code>{ generateSql({dimensions: activeDimensions, measures: activeMeasures}) }</code></pre>\n                  </p>\n                  <Button intent={\"primary\"} style={{width: 200}}>\n                      Run\n                  </Button>\n              </div>\n          </div>\n      </div>\n  );\n}\n\ntype SideTreeProps = {\n    selectedNodes: { [key: string]: boolean},\n    onNodeSelect: ((id: string) => void);\n};\ntype SideTreeState = {\n    expandedNodes: { [key: string]: boolean},\n};\nclass SideTree extends Component<SideTreeProps, SideTreeState> {\n\n    constructor(props: SideTreeProps) {\n        super(props);\n        this.handleNodeCollapse = this.handleNodeCollapse.bind(this);\n        this.handleNodeExpand = this.handleNodeExpand.bind(this);\n        this.handleOnNodeClick = this.handleOnNodeClick.bind(this);\n        this.state = {\n            expandedNodes: {},\n        };\n    }\n\n    render() {\n        const contents = Object.values(views).map( view => ({\n            key: view.id,\n            id: view.id,\n            label: view.name,\n            isExpanded: this.state.expandedNodes[view.id] || false,\n            childNodes: [\n                {\n                    key: \"dimensions\",\n                    id: \"dimensions\",\n                    label: (<span style={{color: Colors.BLUE1}}><strong>Dimensions</strong></span>),\n                    icon: (\n                        <Icon icon=\"tag\" intent={Intent.PRIMARY} className={Classes.TREE_NODE_ICON} />\n                    ),\n                    hasCaret: false,\n                    isExpanded: true,\n                    childNodes: Object.values(view.dimensions).map( dimension => ({\n                        key: dimension.id,\n                        id: dimension.id,\n                        label: dimension.name,\n                        isSelected: this.props.selectedNodes[dimension.id],\n                        secondaryLabel: dimension.description ? (\n                            <Tooltip2 content={dimension.description}>\n                                <Icon icon=\"eye-open\" />\n                            </Tooltip2>\n                        ) : null\n                    }))\n                },\n                {\n                    key: \"measures\",\n                    id: \"measures\",\n                    label: (<span style={{color: Colors.ORANGE1}}><strong>Measures</strong></span>),\n                    icon: (\n                        <Icon icon=\"numerical\" intent={Intent.WARNING} className={Classes.TREE_NODE_ICON} />\n                    ),\n                    isExpanded: true,\n                    hasCaret: false,\n                    childNodes: Object.values(view.measures).map( measure => ({\n                        key: measure.id,\n                        id: measure.id,\n                        label: measure.name,\n                        isSelected: this.props.selectedNodes[measure.id],\n                        secondaryLabel: measure.description ? (\n                            <Tooltip2 content={measure.description}>\n                                <Icon icon=\"eye-open\" />\n                            </Tooltip2>\n                        ) : null\n                    }))\n                },\n            ]\n        }))\n        return (\n            <Tree\n                contents={contents}\n                onNodeCollapse={this.handleNodeCollapse}\n                onNodeExpand={this.handleNodeExpand}\n                onNodeClick={this.handleOnNodeClick}\n                className={Classes.ELEVATION_0}\n                />\n        )\n    };\n\n    handleNodeCollapse = (nodeData: ITreeNode) => {\n        this.setState(state => ({\n            expandedNodes: {...state.expandedNodes, [nodeData.id]: false},\n        }))\n    };\n\n    handleNodeExpand = (nodeData: ITreeNode) => {\n        this.setState(state => ({\n            expandedNodes: {...state.expandedNodes, [nodeData.id]: true},\n        }))\n    };\n\n    handleOnNodeClick = (nodeData: ITreeNode, _nodePath: number[]) => {\n        if (_nodePath.length !== 1) {\n            this.props.onNodeSelect(`${nodeData.id}`)\n        };\n    }\n\n}\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}