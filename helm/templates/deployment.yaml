apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "helm.fullname" . }}
  labels:
    {{- include "helm.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "helm.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "helm.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          - name: PGHOST
            value: {{ .Values.args.postgres.host}}
          
          {{- if .Values.args.postgres.password.rawValue }}
          - name: PGPASSWORD
            value: {{ .Values.args.postgres.password.rawValue }}
          {{- end }}

          {{- if .Values.args.postgres.password.secretName }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  key: {{ .Values.args.postgres.password.secretKey }}
                  name: {{ .Values.args.postgres.password.secretName }}
          {{- end }}

          {{- if .Values.args.postgres.username.rawValue }}
          - name: PGUSER
            value: {{ .Values.args.postgres.username.rawValue }}
          {{- end }}

          {{- if .Values.args.postgres.username.secretName }}
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  key: {{ .Values.args.postgres.username.secretKey }}
                  name: {{ .Values.args.postgres.username.secretName }}
          {{- end }}

          - name: PGPORT
            value: {{ .Values.args.postgres.port | quote }}
          - name: PGDATABASE
            value: {{ .Values.args.postgres.database }}
          
          - name: SECURE_COOKIES
            value: {{ .Values.args.secureCookies | quote }}
          - name: TRUST_PROXY
            value: {{ .Values.args.trustProxy | quote }}

          {{- if .Values.args.lightdashSecret.rawValue }}
          - name: LIGHTDASH_SECRET
            value: {{ .Values.args.lightdashSecret.rawValue }}
          {{- end }}

          {{- if .Values.args.lightdashSecret.secretName }}
          - name: LIGHTDASH_SECRET
            valueFrom:
                secretKeyRef:
                  key: {{ .Values.args.lightdashSecret.secretKey }}
                  name: {{ .Values.args.lightdashSecret.secretName }}
          {{- end }}

          - name: DBT_PROJECT_DIR
            value: {{ .Values.args.dbtProjectDir | quote }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
